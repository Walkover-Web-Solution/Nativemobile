"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Model for Create Stock Group api request
 * POST call
 * API:: (Create Stock Group) company/:companyUniqueName/stock-group
 * response will be hash as StockGroupResponse
 */
var StockGroupRequest = (function () {
    function StockGroupRequest() {
    }
    return StockGroupRequest;
}());
exports.StockGroupRequest = StockGroupRequest;
/**
 * Model for Create Stock Group api response
 * API:: (Create Stock Group) company/:companyUniqueName/stock-group
 */
var StockGroupResponse = (function () {
    function StockGroupResponse() {
    }
    return StockGroupResponse;
}());
exports.StockGroupResponse = StockGroupResponse;
/**
 * Model for Stocks api response
 * API:: (Stocks) company/:companyUniqueName/stock-group/stocks
 * response will ne a hash containing StocksResponse
 */
var StocksResponse = (function () {
    function StocksResponse() {
    }
    return StocksResponse;
}());
exports.StocksResponse = StocksResponse;
/**
 * Model for Delete Stock-Group api response
 * DELETE call
 * from ui we are makingcall to delete-stockgrp api whereas from node it is directed to stock-unit api
 * API:: (Delete Stock-Group) company/:companyUniqueName/stock-group/:stockGroupUniqueName
 * Response will be a string message in body
 */
/**
 * Model for units types api response
 * from ui we are makingcall to units types api whereas from node it is directed to stock-unit api
 * GET call
 * API:: (units types) company/:companyUniqueName/stock-unit
 * Response will be a array of StockUnitResponse
 */
var StockUnitResponse = (function () {
    function StockUnitResponse() {
    }
    return StockUnitResponse;
}());
exports.StockUnitResponse = StockUnitResponse;
/**
 * Model for stock-report api response
 * GET call
 * API:: (stock-report) company/:companyUniqueName/stock-group/:stockGroupUniqueName/stock/:stockUniqueName/report-v2?from=:from&to=:to&count=:count&page=:page
 * you can pass query parameters in this as:
 * 1) from => date string
 * 2) to => date string,
 * 3) page => number,
 * 4) stockUniqueName => string
 * 5)stockGroupUniqueName string
 * 6)count => number which is sent 10
 * Response will be a array of StockUnitResponse
 * the field stockUnitQtyMap contains a hash depending on the stockUnit
 * if stock unit is 'kg' stockUnitQtyMap contains {kg: 1}
 * for hour stockUnitQtyMap contains {hr: 1} etc
 */
var StockReportResponse = (function () {
    function StockReportResponse() {
    }
    return StockReportResponse;
}());
exports.StockReportResponse = StockReportResponse;
var StockReportRequest = (function () {
    function StockReportRequest() {
        this.from = '';
        this.to = '';
        this.count = 10;
        this.page = 1;
    }
    return StockReportRequest;
}());
exports.StockReportRequest = StockReportRequest;
/**
 * Model for stock-detail api response
 * GET call
 * API:: (stock-detail) company/:companyUniqueName/stock-group/:stockGroupUniqueName/stock/:stockUniqueName
 * Response will be hash containing StockDetailResponse
 */
var StockDetailResponse = (function () {
    function StockDetailResponse() {
    }
    return StockDetailResponse;
}());
exports.StockDetailResponse = StockDetailResponse;
/*
 * Model for create-stock api request
 * POST call
 * API:: (create-stock) company/:companyUniqueName/stock-group/:stockGroupUniqueName/stock
 * its response will be hash as StockDetailResponse
 */
var CreateStockRequest = (function () {
    function CreateStockRequest() {
    }
    return CreateStockRequest;
}());
exports.CreateStockRequest = CreateStockRequest;
/*
 * Model for create-stock-unit api request
 * POST call
 * API:: (create-stock-unit) company/:companyUniqueName/stock-unit
 * used to create custom stock units
 * its response will be hash as StockUnitResponse
 */
var StockUnitRequest = (function () {
    function StockUnitRequest() {
    }
    return StockUnitRequest;
}());
exports.StockUnitRequest = StockUnitRequest;
/*
 * Delete stock api
 * DELETE call
 * API:: (Delete stock) company/:companyUniqueName/stock-group/:stockGroupUniqueName/stock/:stockUniqueName
 * its response will be string in body
 */
/*
 * Delete custom stock unit api
 * DELETE call
 * API:: (Delete custom stock unit) company/:companyUniqueName/stock-unit/:uName
 * uname stands for unique name of custom unit
 * its response will be string in body
 */
//# sourceMappingURL=data:application/json;base64,