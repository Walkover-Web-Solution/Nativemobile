"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Model for create account api response
 * API:: (create-account) /company/companyUniqueName/groups/:groupUniqueName:/accounts
 * same model can be use in v2 api here are the details
 * missing keys - gstDetails, state, stateCode, address
 * new keys - [addresses] will be an array of IAccountAddress
 */
var AccountResponse = (function () {
    function AccountResponse() {
    }
    return AccountResponse;
}());
exports.AccountResponse = AccountResponse;
/**
 * Model for create account api request
 * API:: (create-account) /company/companyUniqueName/groups/:groupUniqueName:/accounts
 */
var AccountRequest = (function () {
    function AccountRequest() {
    }
    return AccountRequest;
}());
exports.AccountRequest = AccountRequest;
/**
 * Model for merge account api request
 * API:: (create-account) /company/{companyUniqueName}/accounts/{accountUniqueName}/merge
 * Takes an array of account uniquenames
 * This request will take array of AccountMergeRequest as payload
 * its response will be success message in body
 */
var AccountMergeRequest = (function () {
    function AccountMergeRequest() {
    }
    return AccountMergeRequest;
}());
exports.AccountMergeRequest = AccountMergeRequest;
/**
 * Model for unmerge account api request
 * API:: (create-account) /company/{companyUniqueName}/accounts/{accountUniqueName}/un-merge
 * This request will take array of AccountUnMergeRequest as payload
 * its response will be success message in body
 */
var AccountUnMergeRequest = (function () {
    function AccountUnMergeRequest() {
    }
    return AccountUnMergeRequest;
}());
exports.AccountUnMergeRequest = AccountUnMergeRequest;
/*
 * Model for move account to a group api request
 * API:: (Move-account-to_group) company/:companyUniqueName/accounts/:accountUniqueName/move
 * its response will be success message in body
 */
var AccountMoveRequest = (function () {
    function AccountMoveRequest() {
    }
    return AccountMoveRequest;
}());
exports.AccountMoveRequest = AccountMoveRequest;
/*
 * Model for share account api request
 * API:: (share account) company/:companyUniqueName/accounts/:accountUniqueName/share
 * its response will be success message in body
 */
var ShareAccountRequest = (function () {
    function ShareAccountRequest() {
    }
    return ShareAccountRequest;
}());
exports.ShareAccountRequest = ShareAccountRequest;
/*
 * Model for shared-with account to a group api request
 * API:: (share account) company/:companyUniqueName/accounts/:accountUniqueName/shared-with
 * response will be array of AccountSharedWithResponse
 */
var AccountSharedWithResponse = (function () {
    function AccountSharedWithResponse() {
    }
    return AccountSharedWithResponse;
}());
exports.AccountSharedWithResponse = AccountSharedWithResponse;
/*
 * Model for flatten accounts api response
 * GET call
 * API:: (flatten accounts) company/:companyUniqueName/flatten-accounts?q=&refresh=
 * used to filter accounts while searching on right side searchbox of popup
 * you can pass query parameters in this as page, query as q and refresh and count which is sent 5
 * to get next 5 accounts
 * response will be hash as FlattenAccountsResponse
 */
var FlattenAccountsResponse = (function () {
    function FlattenAccountsResponse() {
    }
    return FlattenAccountsResponse;
}());
exports.FlattenAccountsResponse = FlattenAccountsResponse;
/*
 * Model for tax-hierarchy api response
 * GET call
 * API:: (accounts tax-hierarchy) company/:companyUniqueName/accounts/:accountUniqueName/tax-hierarchy
 * response will be hash as AccountsTaxHierarchyResponse
 */
var AccountsTaxHierarchyResponse = (function () {
    function AccountsTaxHierarchyResponse() {
    }
    return AccountsTaxHierarchyResponse;
}());
exports.AccountsTaxHierarchyResponse = AccountsTaxHierarchyResponse;
var IAccountAddress = (function () {
    function IAccountAddress() {
    }
    return IAccountAddress;
}());
exports.IAccountAddress = IAccountAddress;
var AccountRequestV2 = (function () {
    function AccountRequestV2() {
    }
    return AccountRequestV2;
}());
exports.AccountRequestV2 = AccountRequestV2;
var AccountResponseV2 = (function () {
    function AccountResponseV2() {
    }
    return AccountResponseV2;
}());
exports.AccountResponseV2 = AccountResponseV2;
/*
 * Model for share Account, Group, company
 * POST call
 * API:: company/:companyUniqueName/role/:roleUniqueName/assign
 */
var ShareEntityRequest = (function () {
    function ShareEntityRequest() {
    }
    return ShareEntityRequest;
}());
exports.ShareEntityRequest = ShareEntityRequest;
//# sourceMappingURL=data:application/json;base64,