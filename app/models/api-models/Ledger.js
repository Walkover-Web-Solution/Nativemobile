"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Model for ledger create api request
 * POST call
 * API:: ( ledger create) company/:companyUniqueName/accounts/:accountUniqueName/ledgers
 * in tranasaction there is a field isStock
 * if isStock is true we have to send inventory object inside it please see IInventory interface
 * its response wil be array of LedgerResponse
 */
var LedgerRequest = (function () {
    function LedgerRequest() {
    }
    return LedgerRequest;
}());
exports.LedgerRequest = LedgerRequest;
/*
 * Model for update ledger transaction api request
 * PUT call
 * API:: ( mail ledger ) company/:companyUniqueName/accounts/:accountUniqueName/ledgers/:entryUniqueName
 * its response will be success message in body in single object of LedgerResponse
 */
var LedgerUpdateRequest = (function (_super) {
    __extends(LedgerUpdateRequest, _super);
    function LedgerUpdateRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LedgerUpdateRequest;
}(LedgerRequest));
exports.LedgerUpdateRequest = LedgerUpdateRequest;
/*
 * Model for Create, Update ledger entry api response
 * POST, PUT, GET call
 * Note:: while POST and GET LedgerResponse will be in array in body, and while put it will be a object in body
 * API:: ( Create ledger ) company/:companyUniqueName/accounts/:accountUniqueName/ledgers
 * API:: ( Update ledger ) company/:companyUniqueName/accounts/:accountUniqueName/ledgers/:entryUniqueName
 * API:: ( Get single transaction detail in ledger ) company/:companyUniqueName/accounts/:accountUniqueName/ledgers/:entryUniqueName
 */
var LedgerResponse = (function () {
    function LedgerResponse() {
        this.voucher = { name: '', shortCode: '' };
    }
    return LedgerResponse;
}());
exports.LedgerResponse = LedgerResponse;
/*
 * Model for mail ledger api request
 * POST call
 * API:: ( mail ledger ) company/:companyUniqueName/accounts/:accountUniqueName/ledgers/mail
 * its response will be success message in body
 */
var MailLedgerRequest = (function () {
    function MailLedgerRequest() {
        this.recipients = [];
    }
    return MailLedgerRequest;
}());
exports.MailLedgerRequest = MailLedgerRequest;
/*
 * Model for Download invoice api request
 * POST call
 * API:: ( Download invoice ) company/:companyUniqueName/accounts/:accountUniqueName/invoices/download
 * its response will be success message in body
 */
var DownloadLedgerRequest = (function () {
    function DownloadLedgerRequest() {
    }
    return DownloadLedgerRequest;
}());
exports.DownloadLedgerRequest = DownloadLedgerRequest;
/*
 * Model for Export Ledger api request
 * GET call
 * API:: ( Export Ledger ) company/:companyUniqueName/accounts/:accountUniqueName/export-ledger
 * you can also pass three query arameters parameters as
 * 1) from: this will be starting date
 * 2) ltype: layout type values [ 'admin-detailed', 'admin-condensed', view-detailed]
 * 3) to: this will be ending date
 * Reponse will be base 64 encoded string in body
 */
/*
 * Model for transactions api response
 * GET call
 * API:: ( transactions ) company/:companyUniqueName/accounts/:accountUniqueName/ledgers/transactions?count=:count&from=:from&page=:page&q=:q&reversePage=:reversePage&sort=:sort&to=:to
 * you can also pass query arameters parameters as
 * 1) from: this will be starting date
 * 2) count: number per page sent 15
 * 3) to: this will be ending date
 * 4) q: query
 * 5) reversePage: boolean
 * 6) sort= asc or desc
 * 7) page: number
 * Reponse will be hash containing TransactionsResponse
 */
var TransactionsResponse = (function () {
    function TransactionsResponse() {
    }
    return TransactionsResponse;
}());
exports.TransactionsResponse = TransactionsResponse;
var TransactionsRequest = (function () {
    function TransactionsRequest() {
        this.q = '';
        this.page = 0;
        this.count = 15;
        this.accountUniqueName = '';
        this.from = '';
        this.to = '';
        this.sort = 'asc';
        this.reversePage = false;
    }
    return TransactionsRequest;
}());
exports.TransactionsRequest = TransactionsRequest;
var ReconcileResponse = (function () {
    function ReconcileResponse() {
    }
    return ReconcileResponse;
}());
exports.ReconcileResponse = ReconcileResponse;
var MagicLinkRequest = (function () {
    function MagicLinkRequest() {
        this.from = '';
        this.to = '';
    }
    return MagicLinkRequest;
}());
exports.MagicLinkRequest = MagicLinkRequest;
var MagicLinkResponse = (function () {
    function MagicLinkResponse() {
    }
    return MagicLinkResponse;
}());
exports.MagicLinkResponse = MagicLinkResponse;
var ExportLedgerRequest = (function () {
    function ExportLedgerRequest() {
        this.from = '';
        this.to = '';
        this.type = '';
    }
    return ExportLedgerRequest;
}());
exports.ExportLedgerRequest = ExportLedgerRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGVkZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiTGVkZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0E7Ozs7Ozs7R0FPRztBQUNIO0lBQUE7SUFpQkEsQ0FBQztJQUFELG9CQUFDO0FBQUQsQ0FBQyxBQWpCRCxJQWlCQztBQWpCWSxzQ0FBYTtBQW1CMUI7Ozs7O0dBS0c7QUFDSDtJQUF5Qyx1Q0FBYTtJQUF0RDs7SUFLQSxDQUFDO0lBQUQsMEJBQUM7QUFBRCxDQUFDLEFBTEQsQ0FBeUMsYUFBYSxHQUtyRDtBQUxZLGtEQUFtQjtBQU9oQzs7Ozs7OztHQU9HO0FBQ0g7SUFBQTtRQWlCUyxZQUFPLEdBQWlCLEVBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFDLENBQUM7SUFHM0QsQ0FBQztJQUFELHFCQUFDO0FBQUQsQ0FBQyxBQXBCRCxJQW9CQztBQXBCWSx3Q0FBYztBQXNCM0I7Ozs7O0dBS0c7QUFDSDtJQUFBO1FBQ1MsZUFBVSxHQUFhLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBQUQsd0JBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQztBQUZZLDhDQUFpQjtBQUk5Qjs7Ozs7R0FLRztBQUNIO0lBQUE7SUFFQSxDQUFDO0lBQUQsNEJBQUM7QUFBRCxDQUFDLEFBRkQsSUFFQztBQUZZLHNEQUFxQjtBQVdsQzs7Ozs7Ozs7O0dBU0c7QUFFSDs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUg7SUFBQTtJQWFBLENBQUM7SUFBRCwyQkFBQztBQUFELENBQUMsQUFiRCxJQWFDO0FBYlksb0RBQW9CO0FBZWpDO0lBQUE7UUFDUyxNQUFDLEdBQVcsRUFBRSxDQUFDO1FBQ2YsU0FBSSxHQUFXLENBQUMsQ0FBQztRQUNqQixVQUFLLEdBQVcsRUFBRSxDQUFDO1FBQ25CLHNCQUFpQixHQUFXLEVBQUUsQ0FBQztRQUMvQixTQUFJLEdBQVcsRUFBRSxDQUFDO1FBQ2xCLE9BQUUsR0FBVyxFQUFFLENBQUM7UUFDaEIsU0FBSSxHQUFXLEtBQUssQ0FBQztRQUNyQixnQkFBVyxHQUFZLEtBQUssQ0FBQztJQUN0QyxDQUFDO0lBQUQsMEJBQUM7QUFBRCxDQUFDLEFBVEQsSUFTQztBQVRZLGtEQUFtQjtBQTRCaEM7SUFBQTtJQXNCQSxDQUFDO0lBQUQsd0JBQUM7QUFBRCxDQUFDLEFBdEJELElBc0JDO0FBdEJZLDhDQUFpQjtBQXdCOUI7SUFBQTtRQUNTLFNBQUksR0FBVyxFQUFFLENBQUM7UUFDbEIsT0FBRSxHQUFXLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBQUQsdUJBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQztBQUhZLDRDQUFnQjtBQUs3QjtJQUFBO0lBRUEsQ0FBQztJQUFELHdCQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7QUFGWSw4Q0FBaUI7QUFJOUI7SUFBQTtRQUNTLFNBQUksR0FBVyxFQUFFLENBQUM7UUFDbEIsT0FBRSxHQUFXLEVBQUUsQ0FBQztRQUNoQixTQUFJLEdBQVcsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFBRCwwQkFBQztBQUFELENBQUMsQUFKRCxJQUlDO0FBSlksa0RBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUxlZGdlckFkdmFuY2VTZWFyY2hSZXF1ZXN0IH0gZnJvbSAnLi9MZWRnZXInO1xuaW1wb3J0IHsgSUNsb3NpbmdCYWxhbmNlLCBJRm9yd2FyZEJhbGFuY2UsIElMZWRnZXIsIElMZWRnZXJUcmFuc2FjdGlvbkl0ZW0sIElUb3RhbEl0ZW0sIElUcmFuc2FjdGlvbkl0ZW0sIElUcmFuc2FjdGlvbnMsIElWb3VjaGVySXRlbSB9IGZyb20gJy4uL2ludGVyZmFjZXMvbGVkZ2VyLmludGVyZmFjZSc7XG5cbi8qXG4gKiBNb2RlbCBmb3IgbGVkZ2VyIGNyZWF0ZSBhcGkgcmVxdWVzdFxuICogUE9TVCBjYWxsXG4gKiBBUEk6OiAoIGxlZGdlciBjcmVhdGUpIGNvbXBhbnkvOmNvbXBhbnlVbmlxdWVOYW1lL2FjY291bnRzLzphY2NvdW50VW5pcXVlTmFtZS9sZWRnZXJzXG4gKiBpbiB0cmFuYXNhY3Rpb24gdGhlcmUgaXMgYSBmaWVsZCBpc1N0b2NrXG4gKiBpZiBpc1N0b2NrIGlzIHRydWUgd2UgaGF2ZSB0byBzZW5kIGludmVudG9yeSBvYmplY3QgaW5zaWRlIGl0IHBsZWFzZSBzZWUgSUludmVudG9yeSBpbnRlcmZhY2VcbiAqIGl0cyByZXNwb25zZSB3aWwgYmUgYXJyYXkgb2YgTGVkZ2VyUmVzcG9uc2VcbiAqL1xuZXhwb3J0IGNsYXNzIExlZGdlclJlcXVlc3QgaW1wbGVtZW50cyBJTGVkZ2VyIHtcbiAgcHVibGljIGFwcGx5QXBwbGljYWJsZVRheGVzPzogYm9vbGVhbjtcbiAgcHVibGljIGF0dGFjaGVkRmlsZT86IHN0cmluZztcbiAgcHVibGljIGF0dGFjaGVkRmlsZU5hbWU/OiBzdHJpbmc7XG4gIHB1YmxpYyBjb21wb3VuZFRvdGFsPzogbnVtYmVyO1xuICBwdWJsaWMgY2hlcXVlTnVtYmVyPzogc3RyaW5nO1xuICBwdWJsaWMgY2hlcXVlQ2xlYXJhbmNlRGF0ZT86IHN0cmluZztcbiAgcHVibGljIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBwdWJsaWMgZW50cnlEYXRlOiBzdHJpbmc7XG4gIHB1YmxpYyBnZW5lcmF0ZUludm9pY2U/OiBib29sZWFuO1xuICBwdWJsaWMgaXNJbmNsdXNpdmVUYXg/OiBib29sZWFuO1xuICBwdWJsaWMgdGFnPzogc3RyaW5nO1xuICBwdWJsaWMgdGF4ZXM/OiBzdHJpbmdbXTtcbiAgcHVibGljIHRyYW5zYWN0aW9uczogSUxlZGdlclRyYW5zYWN0aW9uSXRlbVtdO1xuICBwdWJsaWMgdW5jb25maXJtZWRFbnRyeT86IGJvb2xlYW47XG4gIHB1YmxpYyB2b3VjaGVyOiBJVm91Y2hlckl0ZW07XG4gIHB1YmxpYyB2b3VjaGVyVHlwZT86IHN0cmluZztcbn1cblxuLypcbiAqIE1vZGVsIGZvciB1cGRhdGUgbGVkZ2VyIHRyYW5zYWN0aW9uIGFwaSByZXF1ZXN0XG4gKiBQVVQgY2FsbFxuICogQVBJOjogKCBtYWlsIGxlZGdlciApIGNvbXBhbnkvOmNvbXBhbnlVbmlxdWVOYW1lL2FjY291bnRzLzphY2NvdW50VW5pcXVlTmFtZS9sZWRnZXJzLzplbnRyeVVuaXF1ZU5hbWVcbiAqIGl0cyByZXNwb25zZSB3aWxsIGJlIHN1Y2Nlc3MgbWVzc2FnZSBpbiBib2R5IGluIHNpbmdsZSBvYmplY3Qgb2YgTGVkZ2VyUmVzcG9uc2VcbiAqL1xuZXhwb3J0IGNsYXNzIExlZGdlclVwZGF0ZVJlcXVlc3QgZXh0ZW5kcyBMZWRnZXJSZXF1ZXN0IHtcbiAgcHVibGljIGludm9pY2VOdW1iZXI6IHN0cmluZztcbiAgcHVibGljIGludm9pY2VHZW5lcmF0ZWQ6IGJvb2xlYW47XG4gIHB1YmxpYyB0b3RhbDogSVRvdGFsSXRlbTtcbiAgcHVibGljIHZvdWNoZXJObzogc3RyaW5nO1xufVxuXG4vKlxuICogTW9kZWwgZm9yIENyZWF0ZSwgVXBkYXRlIGxlZGdlciBlbnRyeSBhcGkgcmVzcG9uc2VcbiAqIFBPU1QsIFBVVCwgR0VUIGNhbGxcbiAqIE5vdGU6OiB3aGlsZSBQT1NUIGFuZCBHRVQgTGVkZ2VyUmVzcG9uc2Ugd2lsbCBiZSBpbiBhcnJheSBpbiBib2R5LCBhbmQgd2hpbGUgcHV0IGl0IHdpbGwgYmUgYSBvYmplY3QgaW4gYm9keVxuICogQVBJOjogKCBDcmVhdGUgbGVkZ2VyICkgY29tcGFueS86Y29tcGFueVVuaXF1ZU5hbWUvYWNjb3VudHMvOmFjY291bnRVbmlxdWVOYW1lL2xlZGdlcnNcbiAqIEFQSTo6ICggVXBkYXRlIGxlZGdlciApIGNvbXBhbnkvOmNvbXBhbnlVbmlxdWVOYW1lL2FjY291bnRzLzphY2NvdW50VW5pcXVlTmFtZS9sZWRnZXJzLzplbnRyeVVuaXF1ZU5hbWVcbiAqIEFQSTo6ICggR2V0IHNpbmdsZSB0cmFuc2FjdGlvbiBkZXRhaWwgaW4gbGVkZ2VyICkgY29tcGFueS86Y29tcGFueVVuaXF1ZU5hbWUvYWNjb3VudHMvOmFjY291bnRVbmlxdWVOYW1lL2xlZGdlcnMvOmVudHJ5VW5pcXVlTmFtZVxuICovXG5leHBvcnQgY2xhc3MgTGVkZ2VyUmVzcG9uc2Uge1xuICBwdWJsaWMgYXR0YWNoZWRGaWxlPzogc3RyaW5nO1xuICBwdWJsaWMgYXR0YWNoZWRGaWxlTmFtZT86IHN0cmluZztcbiAgcHVibGljIGNoZXF1ZUNsZWFyYW5jZURhdGU/OiBzdHJpbmc7XG4gIHB1YmxpYyBjaGVxdWVOdW1iZXI/OiBzdHJpbmc7XG4gIHB1YmxpYyBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgcHVibGljIGVudHJ5RGF0ZTogc3RyaW5nO1xuICBwdWJsaWMgZ2VuZXJhdGVJbnZvaWNlOiBib29sZWFuO1xuICBwdWJsaWMgaW52b2ljZUdlbmVyYXRlZDogYm9vbGVhbjtcbiAgcHVibGljIGludm9pY2VOdW1iZXI6IHN0cmluZztcbiAgcHVibGljIGludm9pY2VOdW1iZXJBZ2FpbnN0Vm91Y2hlcjogc3RyaW5nO1xuICBwdWJsaWMgdGFnPzogc3RyaW5nO1xuICBwdWJsaWMgdGF4ZXM6IHN0cmluZ1tdO1xuICBwdWJsaWMgdG90YWw6IElDbG9zaW5nQmFsYW5jZTtcbiAgcHVibGljIHRyYW5zYWN0aW9uczogSUxlZGdlclRyYW5zYWN0aW9uSXRlbVtdO1xuICBwdWJsaWMgdW5jb25maXJtZWRFbnRyeTogYm9vbGVhbjtcbiAgcHVibGljIHVuaXF1ZU5hbWU6IHN0cmluZztcbiAgcHVibGljIHZvdWNoZXI6IElWb3VjaGVySXRlbSA9IHtuYW1lOiAnJywgc2hvcnRDb2RlOiAnJ307XG4gIHB1YmxpYyB2b3VjaGVyTm86IHN0cmluZztcbiAgcHVibGljIHZvdWNoZXJUeXBlPzogc3RyaW5nO1xufVxuXG4vKlxuICogTW9kZWwgZm9yIG1haWwgbGVkZ2VyIGFwaSByZXF1ZXN0XG4gKiBQT1NUIGNhbGxcbiAqIEFQSTo6ICggbWFpbCBsZWRnZXIgKSBjb21wYW55Lzpjb21wYW55VW5pcXVlTmFtZS9hY2NvdW50cy86YWNjb3VudFVuaXF1ZU5hbWUvbGVkZ2Vycy9tYWlsXG4gKiBpdHMgcmVzcG9uc2Ugd2lsbCBiZSBzdWNjZXNzIG1lc3NhZ2UgaW4gYm9keVxuICovXG5leHBvcnQgY2xhc3MgTWFpbExlZGdlclJlcXVlc3Qge1xuICBwdWJsaWMgcmVjaXBpZW50czogc3RyaW5nW10gPSBbXTtcbn1cblxuLypcbiAqIE1vZGVsIGZvciBEb3dubG9hZCBpbnZvaWNlIGFwaSByZXF1ZXN0XG4gKiBQT1NUIGNhbGxcbiAqIEFQSTo6ICggRG93bmxvYWQgaW52b2ljZSApIGNvbXBhbnkvOmNvbXBhbnlVbmlxdWVOYW1lL2FjY291bnRzLzphY2NvdW50VW5pcXVlTmFtZS9pbnZvaWNlcy9kb3dubG9hZFxuICogaXRzIHJlc3BvbnNlIHdpbGwgYmUgc3VjY2VzcyBtZXNzYWdlIGluIGJvZHlcbiAqL1xuZXhwb3J0IGNsYXNzIERvd25sb2FkTGVkZ2VyUmVxdWVzdCB7XG4gIHB1YmxpYyBpbnZvaWNlTnVtYmVyOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEb3dubG9hZExlZGdlckF0dGFjaG1lbnRSZXNwb25zZSB7XG4gIGZpbGVUeXBlOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgdW5pcXVlTmFtZTogc3RyaW5nO1xuICB1cGxvYWRlZEZpbGU6IGFueTtcbn1cblxuLypcbiAqIE1vZGVsIGZvciBFeHBvcnQgTGVkZ2VyIGFwaSByZXF1ZXN0XG4gKiBHRVQgY2FsbFxuICogQVBJOjogKCBFeHBvcnQgTGVkZ2VyICkgY29tcGFueS86Y29tcGFueVVuaXF1ZU5hbWUvYWNjb3VudHMvOmFjY291bnRVbmlxdWVOYW1lL2V4cG9ydC1sZWRnZXJcbiAqIHlvdSBjYW4gYWxzbyBwYXNzIHRocmVlIHF1ZXJ5IGFyYW1ldGVycyBwYXJhbWV0ZXJzIGFzXG4gKiAxKSBmcm9tOiB0aGlzIHdpbGwgYmUgc3RhcnRpbmcgZGF0ZVxuICogMikgbHR5cGU6IGxheW91dCB0eXBlIHZhbHVlcyBbICdhZG1pbi1kZXRhaWxlZCcsICdhZG1pbi1jb25kZW5zZWQnLCB2aWV3LWRldGFpbGVkXVxuICogMykgdG86IHRoaXMgd2lsbCBiZSBlbmRpbmcgZGF0ZVxuICogUmVwb25zZSB3aWxsIGJlIGJhc2UgNjQgZW5jb2RlZCBzdHJpbmcgaW4gYm9keVxuICovXG5cbi8qXG4gKiBNb2RlbCBmb3IgdHJhbnNhY3Rpb25zIGFwaSByZXNwb25zZVxuICogR0VUIGNhbGxcbiAqIEFQSTo6ICggdHJhbnNhY3Rpb25zICkgY29tcGFueS86Y29tcGFueVVuaXF1ZU5hbWUvYWNjb3VudHMvOmFjY291bnRVbmlxdWVOYW1lL2xlZGdlcnMvdHJhbnNhY3Rpb25zP2NvdW50PTpjb3VudCZmcm9tPTpmcm9tJnBhZ2U9OnBhZ2UmcT06cSZyZXZlcnNlUGFnZT06cmV2ZXJzZVBhZ2Umc29ydD06c29ydCZ0bz06dG9cbiAqIHlvdSBjYW4gYWxzbyBwYXNzIHF1ZXJ5IGFyYW1ldGVycyBwYXJhbWV0ZXJzIGFzXG4gKiAxKSBmcm9tOiB0aGlzIHdpbGwgYmUgc3RhcnRpbmcgZGF0ZVxuICogMikgY291bnQ6IG51bWJlciBwZXIgcGFnZSBzZW50IDE1XG4gKiAzKSB0bzogdGhpcyB3aWxsIGJlIGVuZGluZyBkYXRlXG4gKiA0KSBxOiBxdWVyeVxuICogNSkgcmV2ZXJzZVBhZ2U6IGJvb2xlYW5cbiAqIDYpIHNvcnQ9IGFzYyBvciBkZXNjXG4gKiA3KSBwYWdlOiBudW1iZXJcbiAqIFJlcG9uc2Ugd2lsbCBiZSBoYXNoIGNvbnRhaW5pbmcgVHJhbnNhY3Rpb25zUmVzcG9uc2VcbiAqL1xuXG5leHBvcnQgY2xhc3MgVHJhbnNhY3Rpb25zUmVzcG9uc2UgaW1wbGVtZW50cyBJVHJhbnNhY3Rpb25zIHtcbiAgcHVibGljIGNsb3NpbmdCYWxhbmNlOiBJQ2xvc2luZ0JhbGFuY2U7XG4gIHB1YmxpYyBjb3VudDogbnVtYmVyO1xuICBwdWJsaWMgY3JlZGl0VG90YWw6IG51bWJlcjtcbiAgcHVibGljIGNyZWRpdFRyYW5zYWN0aW9uczogSVRyYW5zYWN0aW9uSXRlbVtdO1xuICBwdWJsaWMgY3JlZGl0VHJhbnNhY3Rpb25zQ291bnQ6IG51bWJlcjtcbiAgcHVibGljIGRlYml0VG90YWw6IG51bWJlcjtcbiAgcHVibGljIGRlYml0VHJhbnNhY3Rpb25zOiBJVHJhbnNhY3Rpb25JdGVtW107XG4gIHB1YmxpYyBkZWJpdFRyYW5zYWN0aW9uc0NvdW50OiBudW1iZXI7XG4gIHB1YmxpYyBmb3J3YXJkZWRCYWxhbmNlOiBJRm9yd2FyZEJhbGFuY2U7XG4gIHB1YmxpYyBwYWdlOiBudW1iZXI7XG4gIHB1YmxpYyB0b3RhbEl0ZW1zOiBudW1iZXI7XG4gIHB1YmxpYyB0b3RhbFBhZ2VzOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdGlvbnNSZXF1ZXN0IHtcbiAgcHVibGljIHE6IHN0cmluZyA9ICcnO1xuICBwdWJsaWMgcGFnZTogbnVtYmVyID0gMDtcbiAgcHVibGljIGNvdW50OiBudW1iZXIgPSAxNTtcbiAgcHVibGljIGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcgPSAnJztcbiAgcHVibGljIGZyb206IHN0cmluZyA9ICcnO1xuICBwdWJsaWMgdG86IHN0cmluZyA9ICcnO1xuICBwdWJsaWMgc29ydDogc3RyaW5nID0gJ2FzYyc7XG4gIHB1YmxpYyByZXZlcnNlUGFnZTogYm9vbGVhbiA9IGZhbHNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlY29uY2lsZVJlcXVlc3Qge1xuICBhY2NvdW50VW5pcXVlTmFtZT86IHN0cmluZztcbiAgZnJvbT86IHN0cmluZztcbiAgdG8/OiBzdHJpbmc7XG4gIGNoZXF1ZU51bWJlcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUmVjb25jaWxlVG90YWwge1xuICBhbW91bnQ6IG51bWJlcjtcbiAgdHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZWNvbmNpbGVWb3VjaGVyIHtcbiAgbmFtZTogc3RyaW5nO1xuICBzaG9ydENvZGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFJlY29uY2lsZVJlc3BvbnNlIHtcbiAgcHVibGljIHRyYW5zYWN0aW9uczogSUxlZGdlclRyYW5zYWN0aW9uSXRlbVtdO1xuICBwdWJsaWMgdG90YWw6IElSZWNvbmNpbGVUb3RhbDtcbiAgcHVibGljIGF0dGFjaGVkRmlsZTogc3RyaW5nO1xuICBwdWJsaWMgaW52b2ljZUdlbmVyYXRlZDogYm9vbGVhbjtcbiAgcHVibGljIGF0dGFjaGVkRmlsZU5hbWU/OiBzdHJpbmc7XG4gIHB1YmxpYyBjaGVxdWVOdW1iZXI6IHN0cmluZztcbiAgcHVibGljIGludm9pY2VOdW1iZXI6IHN0cmluZztcbiAgcHVibGljIGVudHJ5RGF0ZTogc3RyaW5nO1xuICBwdWJsaWMgdGF4ZXM6IHN0cmluZ1tdO1xuICBwdWJsaWMgdW5pcXVlTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgdW5jb25maXJtZWRFbnRyeTogYm9vbGVhbjtcbiAgcHVibGljIHB1cmNoYXNlSW52b2ljZU51bWJlcjogc3RyaW5nO1xuICBwdWJsaWMgc2VuZFRvR3N0cjI6IGJvb2xlYW47XG4gIHB1YmxpYyBhdmFpbEl0YzogYm9vbGVhbjtcbiAgcHVibGljIGludm9pY2VOdW1iZXJBZ2FpbnN0Vm91Y2hlcj86IGFueTtcbiAgcHVibGljIHdhcm5pbmc/OiBhbnk7XG4gIHB1YmxpYyB2b3VjaGVyOiBJUmVjb25jaWxlVm91Y2hlcjtcbiAgcHVibGljIHZvdWNoZXJObzogbnVtYmVyO1xuICBwdWJsaWMgY2hlcXVlQ2xlYXJhbmNlRGF0ZTogc3RyaW5nO1xuICBwdWJsaWMgdGFnPzogYW55O1xuICBwdWJsaWMgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIE1hZ2ljTGlua1JlcXVlc3Qge1xuICBwdWJsaWMgZnJvbTogc3RyaW5nID0gJyc7XG4gIHB1YmxpYyB0bzogc3RyaW5nID0gJyc7XG59XG5cbmV4cG9ydCBjbGFzcyBNYWdpY0xpbmtSZXNwb25zZSB7XG4gIHB1YmxpYyBtYWdpY0xpbms6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEV4cG9ydExlZGdlclJlcXVlc3Qge1xuICBwdWJsaWMgZnJvbTogc3RyaW5nID0gJyc7XG4gIHB1YmxpYyB0bzogc3RyaW5nID0gJyc7XG4gIHB1YmxpYyB0eXBlOiBzdHJpbmcgPSAnJztcbn1cblxuLyoqXG4gKiBtb2RlbCBmb3IgZWxlZGdlciByZXNwb25zZVxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVMZWRnZXJSZXNwb25zZSB7XG4gIHRyYW5zYWN0aW9uczogSUVMZWRnZXJUcmFuc2FjdGlvbltdO1xuICB0cmFuc2FjdGlvbklkOiBzdHJpbmc7XG4gIGRhdGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRUxlZGdlclRyYW5zYWN0aW9uIHtcbiAgcmVtYXJrczogSUVMZWRnZXJSZW1hcmtzO1xuICBhbW91bnQ6IG51bWJlcjtcbiAgdHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFTGVkZ2VyUmVtYXJrcyB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIG1ldGhvZDogc3RyaW5nO1xuICBlbWFpbD86IGFueTtcbiAgbmFtZT86IGFueTtcbiAgY2hlcXVlTnVtYmVyPzogYW55O1xufVxuXG4vKipcbiAqIExlZGdlciBBZHZhbmNlIFNlYXJjaCBSZXF1ZXN0IGFuZCBSZXNwb25zZVxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxlZGdlckFkdmFuY2VTZWFyY2hSZXF1ZXN0IHtcbiAgdW5pcXVlTmFtZXM6IHN0cmluZ1tdO1xuICBpbmNsdWRlQW1vdW50OiBib29sZWFuO1xuICBhbW91bnQ/OiBhbnk7XG4gIGFtb3VudExlc3NUaGFuOiBib29sZWFuO1xuICBhbW91bnRFcXVhbFRvOiBib29sZWFuO1xuICBhbW91bnRHcmVhdGVyVGhhbjogYm9vbGVhbjtcbiAgaW5jbHVkZURlc2NyaXB0aW9uPzogYW55O1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBpc0ludm9pY2VHZW5lcmF0ZWQ6IGJvb2xlYW47XG4gIGluY2x1ZGVUYWc/OiBhbnk7XG4gIHRhZ3M6IHN0cmluZ1tdO1xuICBpbmNsdWRlUGFydGljdWxhcnM/OiBhbnk7XG4gIHBhcnRpY3VsYXJzOiBzdHJpbmdbXTtcbiAgY2hlcXVlTnVtYmVyOiBzdHJpbmc7XG4gIGRhdGVPbkNoZXF1ZTogc3RyaW5nO1xuICBpbnZlbnRvcnk6IEludmVudG9yeTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTGVkZ2VyQWR2YW5jZVNlYXJjaFJlc3BvbnNlIHtcbiAgcGFnZTogbnVtYmVyO1xuICBjb3VudDogbnVtYmVyO1xuICB0b3RhbFBhZ2VzOiBudW1iZXI7XG4gIHRvdGFsSXRlbXM6IG51bWJlcjtcbiAgZGViaXRUcmFuc2FjdGlvbnNDb3VudDogbnVtYmVyO1xuICBjcmVkaXRUcmFuc2FjdGlvbnNDb3VudDogbnVtYmVyO1xuICBmb3J3YXJkZWRCYWxhbmNlOiBJRm9yd2FyZGVkQmFsYW5jZTtcbiAgY2xvc2luZ0JhbGFuY2U6IElDbG9zaW5nQmFsYW5jZTtcbiAgZGViaXRUb3RhbDogbnVtYmVyO1xuICBjcmVkaXRUb3RhbDogbnVtYmVyO1xuICBkZWJpdFRyYW5zYWN0aW9uczogRGViaXRUcmFuc2FjdGlvbltdO1xuICBjcmVkaXRUcmFuc2FjdGlvbnM6IGFueVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludmVudG9yeSB7XG4gIGluY2x1ZGVJbnZlbnRvcnk/OiBhbnk7XG4gIGludmVudG9yaWVzOiBzdHJpbmdbXTtcbiAgcXVhbnRpdHk/OiBhbnk7XG4gIGluY2x1ZGVRdWFudGl0eTogYm9vbGVhbjtcbiAgcXVhbnRpdHlMZXNzVGhhbjogYm9vbGVhbjtcbiAgcXVhbnRpdHlFcXVhbFRvOiBib29sZWFuO1xuICBxdWFudGl0eUdyZWF0ZXJUaGFuOiBib29sZWFuO1xuICBpbmNsdWRlSXRlbVZhbHVlOiBib29sZWFuO1xuICBpdGVtVmFsdWU6IG51bWJlcjtcbiAgaW5jbHVkZUl0ZW1MZXNzVGhhbjogYm9vbGVhbjtcbiAgaW5jbHVkZUl0ZW1FcXVhbFRvOiBib29sZWFuO1xuICBpbmNsdWRlSXRlbUdyZWF0ZXJUaGFuOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGb3J3YXJkZWRCYWxhbmNlIHtcbiAgYW1vdW50OiBudW1iZXI7XG4gIHR5cGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ2xvc2luZ0JhbGFuY2Uge1xuICBhbW91bnQ6IG51bWJlcjtcbiAgdHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQYXJ0aWN1bGFyIHtcbiAgbmFtZTogc3RyaW5nO1xuICB1bmlxdWVOYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGViaXRUcmFuc2FjdGlvbiB7XG4gIHBhcnRpY3VsYXI6IElQYXJ0aWN1bGFyO1xuICBhbW91bnQ6IG51bWJlcjtcbiAgdHlwZTogc3RyaW5nO1xuICBpbnZlbnRvcnk/OiBhbnk7XG4gIGlzVGF4OiBib29sZWFuO1xuICBlbnRyeVVuaXF1ZU5hbWU6IHN0cmluZztcbiAgZW50cnlEYXRlOiBzdHJpbmc7XG4gIGlzSW52b2ljZUdlbmVyYXRlZDogYm9vbGVhbjtcbiAgaW52b2ljZU51bWJlcjogc3RyaW5nO1xuICB1bmNvbmZpcm1lZEVudHJ5OiBib29sZWFuO1xuICBhdHRhY2hlZEZpbGVOYW1lOiBzdHJpbmc7XG4gIGF0dGFjaGVkRmlsZVVuaXF1ZU5hbWU6IHN0cmluZztcbiAgY2hlcXVlTnVtYmVyOiBzdHJpbmc7XG4gIGNoZXF1ZUNsZWFyYW5jZURhdGU6IHN0cmluZztcbiAgZW50cnlDcmVhdGVkQXQ6IHN0cmluZztcbiAgaXNCYXNlQWNjb3VudDogYm9vbGVhbjtcbiAgaXNDb21wb3VuZEVudHJ5OiBib29sZWFuO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICB2b3VjaGVyTmFtZTogc3RyaW5nO1xuICB0YWc6IHN0cmluZztcbn1cbiJdfQ==