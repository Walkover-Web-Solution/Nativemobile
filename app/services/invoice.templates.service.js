"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var invoice_1 = require("./apiurls/invoice");
var httpWrapper_service_1 = require("./httpWrapper.service");
var router_1 = require("@angular/router");
var catchmanger_1 = require("./catchManager/catchmanger");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
// import { IsDivVisible } from '../invoice/templates/edit-template/filters-container/content-filters/content.filters.component';
var InvoiceTemplatesService = (function () {
    function InvoiceTemplatesService(errorHandler, _http, _router, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._router = _router;
        this._generalService = _generalService;
        this.config = config;
    }
    InvoiceTemplatesService.prototype.getTemplates = function () {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + invoice_1.INVOICE_API.GET_USER_TEMPLATES).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    InvoiceTemplatesService.prototype.getAllCreatedTemplates = function () {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + invoice_1.INVOICE_API.GET_CREATED_TEMPLATES.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    InvoiceTemplatesService.prototype.getCustomTemplate = function (templateUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + invoice_1.INVOICE_API.GET_CUSTOM_TEMPLATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':templateUniqueName', templateUniqueName)).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) {
            var object = _this.errorHandler.HandleCatch(e);
            return object.map(function (p) { return p.body; });
        });
    };
    InvoiceTemplatesService.prototype.setTemplateAsDefault = function (templateUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.patch(this.config.apiUrl + invoice_1.INVOICE_API.SET_AS_DEFAULT.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':templateUniqueName', templateUniqueName), {}).map(function (res) {
            var data = res.json();
            data.queryString = { templateUniqueName: templateUniqueName };
            return data;
        }).catch(function (e) {
            var object = _this.errorHandler.HandleCatch(e);
            return object.map(function (p) { return p.body; });
        });
    };
    InvoiceTemplatesService.prototype.deleteTemplate = function (templateUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.delete(this.config.apiUrl + invoice_1.INVOICE_API.DELETE_TEMPLATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':templateUniqueName', templateUniqueName)).map(function (res) {
            var data = res.json();
            data.queryString = { templateUniqueName: templateUniqueName };
            return data;
        }).catch(function (e) {
            var object = _this.errorHandler.HandleCatch(e);
            return object.map(function (p) { return p.body; });
        });
    };
    // public saveTemplates(model: any): Observable<Template> {
    //   alert('ok');
    //   this.store.take(1).subscribe(s => {
    //     if (s.session.user) {
    //       this.user = s.session.user.user;
    //     }
    //     this.companyUniqueName = s.session.companyUniqueName;
    //   });
    //   return this._http.post(this.config.apiUrl + INVOICE_API.CREATE_NEW_TEMPLATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), model).map((res) => {
    //     let data: Template = res.json();
    //     return data;
    //   }).catch((e) => {
    //     let object = this.errorHandler.HandleCatch<Template, string>(e);
    //     return object.map(p => p.body);
    //   });
    // }
    InvoiceTemplatesService.prototype.saveTemplates = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + invoice_1.INVOICE_API.CREATE_NEW_TEMPLATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), model).map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, model); });
    };
    InvoiceTemplatesService.prototype.updateTemplate = function (templateUniqueName, model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + invoice_1.INVOICE_API.UPDATE_TEMPLATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':templateUniqueName', encodeURIComponent(templateUniqueName)), model).map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, model); });
    };
    return InvoiceTemplatesService;
}());
InvoiceTemplatesService = __decorate([
    core_1.Injectable(),
    __param(4, core_1.Optional()), __param(4, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService, router_1.Router,
        general_service_1.GeneralService, Object])
], InvoiceTemplatesService);
exports.InvoiceTemplatesService = InvoiceTemplatesService;
//# sourceMappingURL=data:application/json;base64,