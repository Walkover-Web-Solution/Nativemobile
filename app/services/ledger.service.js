"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Ledger_1 = require("../models/api-models/Ledger");
var core_1 = require("@angular/core");
require("rxjs/add/operator/map");
var httpWrapper_service_1 = require("./httpWrapper.service");
var router_1 = require("@angular/router");
var catchmanger_1 = require("./catchManager/catchmanger");
var ledger_api_1 = require("./apiurls/ledger.api");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var LedgerService = (function () {
    function LedgerService(errorHandler, _http, _router, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._router = _router;
        this._generalService = _generalService;
        this.config = config;
    }
    /**
     * get bank transactions for a account
     */
    LedgerService.prototype.GetBankTranscationsForLedger = function (accountUniqueName, from) {
        var _this = this;
        if (from === void 0) { from = ''; }
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + ledger_api_1.LEDGER_API.GET_BANK_TRANSACTIONS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)).replace(':from', from)).map(function (res) {
            var data = res.json();
            data.request = accountUniqueName;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, { accountUniqueName: accountUniqueName }); });
    };
    /*
    * Map Bank transaction
    */
    LedgerService.prototype.MapBankTransactions = function (model, unqObj) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + ledger_api_1.LEDGER_API.MAP_BANK_TRANSACTIONS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(unqObj.accountUniqueName)).replace(':transactionId', unqObj.transactionId), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = unqObj;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, unqObj); });
    };
    /**
     * get ledger transactions
     */
    LedgerService.prototype.GetLedgerTranscations = function (q, page, count, accountUniqueName, from, to, sort, reversePage) {
        var _this = this;
        if (q === void 0) { q = ''; }
        if (page === void 0) { page = 1; }
        if (count === void 0) { count = 15; }
        if (accountUniqueName === void 0) { accountUniqueName = ''; }
        if (from === void 0) { from = ''; }
        if (to === void 0) { to = ''; }
        if (sort === void 0) { sort = 'asc'; }
        if (reversePage === void 0) { reversePage = false; }
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var request = new Ledger_1.TransactionsRequest();
        request.q = q;
        request.accountUniqueName = accountUniqueName;
        request.count = count;
        request.from = from;
        request.page = page;
        request.reversePage = reversePage;
        request.sort = sort;
        request.to = to;
        return this._http.get(this.config.apiUrl + ledger_api_1.LEDGER_API.GET.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':q', encodeURIComponent(q || '')).replace(':page', page.toString()).replace(':count', encodeURIComponent(count.toString())).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)).replace(':from', from).replace(':sort', encodeURIComponent(sort)).replace(':to', encodeURIComponent(to)).replace(':reversePage', reversePage.toString())).map(function (res) {
            var data = res.json();
            data.request = request;
            data.queryString = { q: q, page: page, count: count, accountUniqueName: accountUniqueName, from: from, to: to, reversePage: reversePage, sort: sort };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, request, { q: q, page: page, count: count, accountUniqueName: accountUniqueName, from: from, to: to, reversePage: reversePage, sort: sort }); });
    };
    /*
    * create Ledger transaction
    */
    LedgerService.prototype.CreateLedger = function (model, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + ledger_api_1.LEDGER_API.CREATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, { accountUniqueName: accountUniqueName }); });
    };
    /*
    * update Ledger transaction
    */
    LedgerService.prototype.UpdateLedgerTransactions = function (model, accountUniqueName, entryUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + ledger_api_1.LEDGER_API.UNIVERSAL.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)).replace(':entryUniqueName', entryUniqueName), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName, entryUniqueName: entryUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, { accountUniqueName: accountUniqueName, entryUniqueName: entryUniqueName }); });
    };
    /*
    * delete Ledger transaction
    */
    LedgerService.prototype.DeleteLedgerTransaction = function (accountUniqueName, entryUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.delete(this.config.apiUrl + ledger_api_1.LEDGER_API.UNIVERSAL.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)).replace(':entryUniqueName', entryUniqueName)).map(function (res) {
            var data = res.json();
            data.queryString = { accountUniqueName: accountUniqueName, entryUniqueName: entryUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, accountUniqueName, { accountUniqueName: accountUniqueName, entryUniqueName: entryUniqueName }); });
    };
    /*
    * Ledger get transaction details
    */
    LedgerService.prototype.GetLedgerTransactionDetails = function (accountUniqueName, entryUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + ledger_api_1.LEDGER_API.UNIVERSAL.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)).replace(':entryUniqueName', entryUniqueName)).map(function (res) {
            var data = res.json();
            data.queryString = { accountUniqueName: accountUniqueName, entryUniqueName: entryUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, accountUniqueName, { accountUniqueName: accountUniqueName, entryUniqueName: entryUniqueName }); });
    };
    /**
     * Ledger get reconcile entries
     * It will internally call Eledger API with condition
     * Note in response user only get check number entries
     * /ledgers/reconcile?from=24-06-2017&to=24-07-2017
     */
    LedgerService.prototype.GetReconcile = function (accountUniqueName, from, to, chequeNumber) {
        var _this = this;
        if (accountUniqueName === void 0) { accountUniqueName = ''; }
        if (from === void 0) { from = ''; }
        if (to === void 0) { to = ''; }
        if (chequeNumber === void 0) { chequeNumber = ''; }
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + ledger_api_1.LEDGER_API.RECONCILE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)).replace(':from', from).replace(':to', to).replace(':chequeNumber', chequeNumber)).map(function (res) {
            var data = res.json();
            data.queryString = { accountUniqueName: accountUniqueName, from: from, to: to, chequeNumber: chequeNumber };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, '', { accountUniqueName: accountUniqueName, from: from, to: to, chequeNumber: chequeNumber }); });
    };
    LedgerService.prototype.DownloadAttachement = function (fileName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + ledger_api_1.LEDGER_API.DOWNLOAD_ATTACHMENT.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))
            .replace(':fileName', fileName))
            .map(function (res) {
            var data = res.json();
            data.request = fileName;
            data.queryString = { fileName: fileName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, fileName, { fileName: fileName }); });
    };
    LedgerService.prototype.DownloadInvoice = function (model, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + ledger_api_1.LEDGER_API.DOWNLOAD_INVOICE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, { accountUniqueName: accountUniqueName }); });
    };
    LedgerService.prototype.GenerateMagicLink = function (model, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + ledger_api_1.LEDGER_API.MAGIC_LINK.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))
            .replace(':accountUniqueName', encodeURIComponent(accountUniqueName))
            .replace(':from', model.from).replace(':to', model.to), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, { accountUniqueName: accountUniqueName }); });
    };
    LedgerService.prototype.ExportLedger = function (model, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + ledger_api_1.LEDGER_API.EXPORT_LEDGER.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))
            .replace(':accountUniqueName', encodeURIComponent(accountUniqueName))
            .replace(':from', model.from).replace(':to', model.to).replace(':type', encodeURIComponent(model.type)))
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, { accountUniqueName: accountUniqueName }); });
    };
    LedgerService.prototype.MailLedger = function (model, accountUniqueName, from, to, format) {
        var _this = this;
        if (from === void 0) { from = ''; }
        if (to === void 0) { to = ''; }
        if (format === void 0) { format = ''; }
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + ledger_api_1.LEDGER_API.MAIL_LEDGER.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))
            .replace(':accountUniqueName', encodeURIComponent(accountUniqueName))
            .replace(':from', from).replace(':to', to).replace(':format', encodeURIComponent(format)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName, from: from, to: to, format: format };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, { accountUniqueName: accountUniqueName }); });
    };
    LedgerService.prototype.AdvanceSearch = function (model, accountUniqueName, from, to, sortingOrder, page, count) {
        var _this = this;
        if (from === void 0) { from = ''; }
        if (to === void 0) { to = ''; }
        if (sortingOrder === void 0) { sortingOrder = ''; }
        if (page === void 0) { page = ''; }
        if (count === void 0) { count = ''; }
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + ledger_api_1.LEDGER_API.ADVANCE_SEARCH.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))
            .replace(':accountUniqueName', encodeURIComponent(accountUniqueName))
            .replace(':fromDate', from).replace(':toDate', to).replace(':sortingOrder', sortingOrder).replace(':page', page).replace(':count', encodeURIComponent(count)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName, from: from, to: to, count: count };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, { accountUniqueName: accountUniqueName }); });
    };
    return LedgerService;
}());
LedgerService = __decorate([
    core_1.Injectable(),
    __param(4, core_1.Optional()), __param(4, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService, router_1.Router,
        general_service_1.GeneralService, Object])
], LedgerService);
exports.LedgerService = LedgerService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVkZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsZWRnZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNEQUFtVztBQUNuVyxzQ0FBNkQ7QUFDN0QsaUNBQStCO0FBQy9CLDZEQUEyRDtBQUMzRCwwQ0FBeUM7QUFJekMsMERBQTBEO0FBQzFELG1EQUFrRDtBQUNsRCxxREFBbUQ7QUFDbkQsbURBQXFFO0FBSXJFLElBQWEsYUFBYTtJQUl4Qix1QkFBb0IsWUFBMEIsRUFBUyxLQUF5QixFQUFTLE9BQWUsRUFDOUYsZUFBK0IsRUFBNkMsTUFBMEI7UUFENUYsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBUyxVQUFLLEdBQUwsS0FBSyxDQUFvQjtRQUFTLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDOUYsb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBQTZDLFdBQU0sR0FBTixNQUFNLENBQW9CO0lBQ2hILENBQUM7SUFFRDs7T0FFRztJQUNJLG9EQUE0QixHQUFuQyxVQUFvQyxpQkFBeUIsRUFBRSxJQUFpQjtRQUFoRixpQkFTQztRQVQ4RCxxQkFBQSxFQUFBLFNBQWlCO1FBQzlFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUM7UUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLHVCQUFVLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElB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TkQsSUE4TkM7QUE5TlksYUFBYTtJQUR6QixpQkFBVSxFQUFFO0lBTWlDLFdBQUEsZUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLGFBQU0sQ0FBQyw4QkFBYSxDQUFDLENBQUE7cUNBRDNDLDBCQUFZLEVBQWdCLHdDQUFrQixFQUFrQixlQUFNO1FBQzdFLGdDQUFjO0dBTDlCLGFBQWEsQ0E4TnpCO0FBOU5ZLHNDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG93bmxvYWRMZWRnZXJBdHRhY2htZW50UmVzcG9uc2UsIERvd25sb2FkTGVkZ2VyUmVxdWVzdCwgRXhwb3J0TGVkZ2VyUmVxdWVzdCwgSUVMZWRnZXJSZXNwb25zZSwgSUxlZGdlckFkdmFuY2VTZWFyY2hSZXF1ZXN0LCBJTGVkZ2VyQWR2YW5jZVNlYXJjaFJlc3BvbnNlLCBMZWRnZXJSZXNwb25zZSwgTGVkZ2VyVXBkYXRlUmVxdWVzdCwgTWFnaWNMaW5rUmVxdWVzdCwgTWFnaWNMaW5rUmVzcG9uc2UsIE1haWxMZWRnZXJSZXF1ZXN0LCBSZWNvbmNpbGVSZXNwb25zZSwgVHJhbnNhY3Rpb25zUmVxdWVzdCwgVHJhbnNhY3Rpb25zUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvYXBpLW1vZGVscy9MZWRnZXInO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tYXAnO1xuaW1wb3J0IHsgSHR0cFdyYXBwZXJTZXJ2aWNlIH0gZnJvbSAnLi9odHRwV3JhcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9hcGktbW9kZWxzL0Jhc2VSZXNwb25zZSc7XG5pbXBvcnQgeyBVc2VyRGV0YWlscyB9IGZyb20gJy4uL21vZGVscy9hcGktbW9kZWxzL2xvZ2luTW9kZWxzJztcbmltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gJy4vY2F0Y2hNYW5hZ2VyL2NhdGNobWFuZ2VyJztcbmltcG9ydCB7IExFREdFUl9BUEkgfSBmcm9tICcuL2FwaXVybHMvbGVkZ2VyLmFwaSc7XG5pbXBvcnQgeyBHZW5lcmFsU2VydmljZSB9IGZyb20gJy4vZ2VuZXJhbC5zZXJ2aWNlJztcbmltcG9ydCB7IFNlcnZpY2VDb25maWcsIElTZXJ2aWNlQ29uZmlnQXJncyB9IGZyb20gJy4vc2VydmljZS5jb25maWcnO1xuaW1wb3J0IHsgQmxhbmtMZWRnZXJWTSB9IGZyb20gJy4uL21vZGVscy9pbnRlcmZhY2VzL2xlZGdlci5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTGVkZ2VyU2VydmljZSB7XG4gIHByaXZhdGUgY29tcGFueVVuaXF1ZU5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSB1c2VyOiBVc2VyRGV0YWlscztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyLCBwdWJsaWMgX2h0dHA6IEh0dHBXcmFwcGVyU2VydmljZSwgcHVibGljIF9yb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIF9nZW5lcmFsU2VydmljZTogR2VuZXJhbFNlcnZpY2UsIEBPcHRpb25hbCgpIEBJbmplY3QoU2VydmljZUNvbmZpZykgcHJpdmF0ZSBjb25maWc6IElTZXJ2aWNlQ29uZmlnQXJncykge1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBiYW5rIHRyYW5zYWN0aW9ucyBmb3IgYSBhY2NvdW50XG4gICAqL1xuICBwdWJsaWMgR2V0QmFua1RyYW5zY2F0aW9uc0ZvckxlZGdlcihhY2NvdW50VW5pcXVlTmFtZTogc3RyaW5nLCBmcm9tOiBzdHJpbmcgPSAnJykge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBMRURHRVJfQVBJLkdFVF9CQU5LX1RSQU5TQUNUSU9OUy5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzphY2NvdW50VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudChhY2NvdW50VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzpmcm9tJywgZnJvbSkpLm1hcCgocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPElFTGVkZ2VyUmVzcG9uc2VbXSwgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnJlcXVlc3QgPSBhY2NvdW50VW5pcXVlTmFtZTtcbiAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lIH07XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8SUVMZWRnZXJSZXNwb25zZVtdLCBzdHJpbmc+KGUsIHsgYWNjb3VudFVuaXF1ZU5hbWUgfSkpO1xuICB9XG5cbiAgLypcbiAgKiBNYXAgQmFuayB0cmFuc2FjdGlvblxuICAqL1xuICBwdWJsaWMgTWFwQmFua1RyYW5zYWN0aW9ucyhtb2RlbDogeyB1bmlxdWVOYW1lOiBzdHJpbmcgfSwgdW5xT2JqOiB7IGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcsIHRyYW5zYWN0aW9uSWQ6IHN0cmluZyB9KTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8c3RyaW5nLCBhbnk+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAucHV0KHRoaXMuY29uZmlnLmFwaVVybCArIExFREdFUl9BUEkuTUFQX0JBTktfVFJBTlNBQ1RJT05TLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHVucU9iai5hY2NvdW50VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzp0cmFuc2FjdGlvbklkJywgdW5xT2JqLnRyYW5zYWN0aW9uSWQpLCBtb2RlbClcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPHN0cmluZywgYW55PiA9IHJlcy5qc29uKCk7XG4gICAgICAgIGRhdGEucmVxdWVzdCA9IG1vZGVsO1xuICAgICAgICBkYXRhLnF1ZXJ5U3RyaW5nID0gdW5xT2JqO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPHN0cmluZywgYW55PihlLCBtb2RlbCwgdW5xT2JqKSk7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IGxlZGdlciB0cmFuc2FjdGlvbnNcbiAgICovXG4gIHB1YmxpYyBHZXRMZWRnZXJUcmFuc2NhdGlvbnMocTogc3RyaW5nID0gJycsIHBhZ2U6IG51bWJlciA9IDEsIGNvdW50OiBudW1iZXIgPSAxNSwgYWNjb3VudFVuaXF1ZU5hbWU6IHN0cmluZyA9ICcnLCBmcm9tOiBzdHJpbmcgPSAnJywgdG86IHN0cmluZyA9ICcnLCBzb3J0OiBzdHJpbmcgPSAnYXNjJywgcmV2ZXJzZVBhZ2U6IGJvb2xlYW4gPSBmYWxzZSk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPFRyYW5zYWN0aW9uc1Jlc3BvbnNlLCBUcmFuc2FjdGlvbnNSZXF1ZXN0Pj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIGxldCByZXF1ZXN0ID0gbmV3IFRyYW5zYWN0aW9uc1JlcXVlc3QoKTtcbiAgICByZXF1ZXN0LnEgPSBxO1xuICAgIHJlcXVlc3QuYWNjb3VudFVuaXF1ZU5hbWUgPSBhY2NvdW50VW5pcXVlTmFtZTtcbiAgICByZXF1ZXN0LmNvdW50ID0gY291bnQ7XG4gICAgcmVxdWVzdC5mcm9tID0gZnJvbTtcbiAgICByZXF1ZXN0LnBhZ2UgPSBwYWdlO1xuICAgIHJlcXVlc3QucmV2ZXJzZVBhZ2UgPSByZXZlcnNlUGFnZTtcbiAgICByZXF1ZXN0LnNvcnQgPSBzb3J0O1xuICAgIHJlcXVlc3QudG8gPSB0bztcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5jb25maWcuYXBpVXJsICsgTEVER0VSX0FQSS5HRVQucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6cScsIGVuY29kZVVSSUNvbXBvbmVudChxIHx8ICcnKSkucmVwbGFjZSgnOnBhZ2UnLCBwYWdlLnRvU3RyaW5nKCkpLnJlcGxhY2UoJzpjb3VudCcsIGVuY29kZVVSSUNvbXBvbmVudChjb3VudC50b1N0cmluZygpKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmZyb20nLCBmcm9tKS5yZXBsYWNlKCc6c29ydCcsIGVuY29kZVVSSUNvbXBvbmVudChzb3J0KSkucmVwbGFjZSgnOnRvJywgZW5jb2RlVVJJQ29tcG9uZW50KHRvKSkucmVwbGFjZSgnOnJldmVyc2VQYWdlJywgcmV2ZXJzZVBhZ2UudG9TdHJpbmcoKSkpLm1hcCgocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPFRyYW5zYWN0aW9uc1Jlc3BvbnNlLCBUcmFuc2FjdGlvbnNSZXF1ZXN0PiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgcSwgcGFnZSwgY291bnQsIGFjY291bnRVbmlxdWVOYW1lLCBmcm9tLCB0bywgcmV2ZXJzZVBhZ2UsIHNvcnQgfTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxUcmFuc2FjdGlvbnNSZXNwb25zZSwgVHJhbnNhY3Rpb25zUmVxdWVzdD4oZSwgcmVxdWVzdCwgeyBxLCBwYWdlLCBjb3VudCwgYWNjb3VudFVuaXF1ZU5hbWUsIGZyb20sIHRvLCByZXZlcnNlUGFnZSwgc29ydCB9KSk7XG4gIH1cblxuICAvKlxuICAqIGNyZWF0ZSBMZWRnZXIgdHJhbnNhY3Rpb25cbiAgKi9cblxuICBwdWJsaWMgQ3JlYXRlTGVkZ2VyKG1vZGVsOiBCbGFua0xlZGdlclZNLCBhY2NvdW50VW5pcXVlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8TGVkZ2VyUmVzcG9uc2VbXSwgQmxhbmtMZWRnZXJWTT4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuY29uZmlnLmFwaVVybCArIExFREdFUl9BUEkuQ1JFQVRFLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSksIG1vZGVsKVxuICAgICAgLm1hcCgocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8TGVkZ2VyUmVzcG9uc2VbXSwgQmxhbmtMZWRnZXJWTT4gPSByZXMuanNvbigpO1xuICAgICAgICBkYXRhLnJlcXVlc3QgPSBtb2RlbDtcbiAgICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgYWNjb3VudFVuaXF1ZU5hbWUgfTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxMZWRnZXJSZXNwb25zZVtdLCBCbGFua0xlZGdlclZNPihlLCBtb2RlbCwgeyBhY2NvdW50VW5pcXVlTmFtZSB9KSk7XG4gIH1cblxuICAvKlxuICAqIHVwZGF0ZSBMZWRnZXIgdHJhbnNhY3Rpb25cbiAgKi9cbiAgcHVibGljIFVwZGF0ZUxlZGdlclRyYW5zYWN0aW9ucyhtb2RlbDogTGVkZ2VyVXBkYXRlUmVxdWVzdCwgYWNjb3VudFVuaXF1ZU5hbWU6IHN0cmluZywgZW50cnlVbmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxMZWRnZXJSZXNwb25zZSwgTGVkZ2VyVXBkYXRlUmVxdWVzdD4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wdXQodGhpcy5jb25maWcuYXBpVXJsICsgTEVER0VSX0FQSS5VTklWRVJTQUwucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6YWNjb3VudFVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQoYWNjb3VudFVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6ZW50cnlVbmlxdWVOYW1lJywgZW50cnlVbmlxdWVOYW1lKSwgbW9kZWwpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxMZWRnZXJSZXNwb25zZSwgTGVkZ2VyVXBkYXRlUmVxdWVzdD4gPSByZXMuanNvbigpO1xuICAgICAgICBkYXRhLnJlcXVlc3QgPSBtb2RlbDtcbiAgICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgYWNjb3VudFVuaXF1ZU5hbWUsIGVudHJ5VW5pcXVlTmFtZSB9O1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPExlZGdlclJlc3BvbnNlLCBMZWRnZXJVcGRhdGVSZXF1ZXN0PihlLCBtb2RlbCwgeyBhY2NvdW50VW5pcXVlTmFtZSwgZW50cnlVbmlxdWVOYW1lIH0pKTtcbiAgfVxuXG4gIC8qXG4gICogZGVsZXRlIExlZGdlciB0cmFuc2FjdGlvblxuICAqL1xuICBwdWJsaWMgRGVsZXRlTGVkZ2VyVHJhbnNhY3Rpb24oYWNjb3VudFVuaXF1ZU5hbWU6IHN0cmluZywgZW50cnlVbmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxzdHJpbmcsIHN0cmluZz4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5kZWxldGUodGhpcy5jb25maWcuYXBpVXJsICsgTEVER0VSX0FQSS5VTklWRVJTQUwucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6YWNjb3VudFVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQoYWNjb3VudFVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6ZW50cnlVbmlxdWVOYW1lJywgZW50cnlVbmlxdWVOYW1lKSkubWFwKChyZXMpID0+IHtcbiAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8c3RyaW5nLCBzdHJpbmc+ID0gcmVzLmpzb24oKTtcbiAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lLCBlbnRyeVVuaXF1ZU5hbWUgfTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxzdHJpbmcsIHN0cmluZz4oZSwgYWNjb3VudFVuaXF1ZU5hbWUsIHsgYWNjb3VudFVuaXF1ZU5hbWUsIGVudHJ5VW5pcXVlTmFtZSB9KSk7XG4gIH1cblxuICAvKlxuICAqIExlZGdlciBnZXQgdHJhbnNhY3Rpb24gZGV0YWlsc1xuICAqL1xuICBwdWJsaWMgR2V0TGVkZ2VyVHJhbnNhY3Rpb25EZXRhaWxzKGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcsIGVudHJ5VW5pcXVlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8TGVkZ2VyUmVzcG9uc2UsIHN0cmluZz4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5jb25maWcuYXBpVXJsICsgTEVER0VSX0FQSS5VTklWRVJTQUwucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6YWNjb3VudFVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQoYWNjb3VudFVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6ZW50cnlVbmlxdWVOYW1lJywgZW50cnlVbmlxdWVOYW1lKSkubWFwKChyZXMpID0+IHtcbiAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8TGVkZ2VyUmVzcG9uc2UsIHN0cmluZz4gPSByZXMuanNvbigpO1xuICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgYWNjb3VudFVuaXF1ZU5hbWUsIGVudHJ5VW5pcXVlTmFtZSB9O1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPExlZGdlclJlc3BvbnNlLCBzdHJpbmc+KGUsIGFjY291bnRVbmlxdWVOYW1lLCB7IGFjY291bnRVbmlxdWVOYW1lLCBlbnRyeVVuaXF1ZU5hbWUgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIExlZGdlciBnZXQgcmVjb25jaWxlIGVudHJpZXNcbiAgICogSXQgd2lsbCBpbnRlcm5hbGx5IGNhbGwgRWxlZGdlciBBUEkgd2l0aCBjb25kaXRpb25cbiAgICogTm90ZSBpbiByZXNwb25zZSB1c2VyIG9ubHkgZ2V0IGNoZWNrIG51bWJlciBlbnRyaWVzXG4gICAqIC9sZWRnZXJzL3JlY29uY2lsZT9mcm9tPTI0LTA2LTIwMTcmdG89MjQtMDctMjAxN1xuICAgKi9cbiAgcHVibGljIEdldFJlY29uY2lsZShhY2NvdW50VW5pcXVlTmFtZTogc3RyaW5nID0gJycsIGZyb206IHN0cmluZyA9ICcnLCB0bzogc3RyaW5nID0gJycsIGNoZXF1ZU51bWJlcjogc3RyaW5nID0gJycpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxSZWNvbmNpbGVSZXNwb25zZVtdLCBzdHJpbmc+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHRoaXMuY29uZmlnLmFwaVVybCArIExFREdFUl9BUEkuUkVDT05DSUxFLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmZyb20nLCBmcm9tKS5yZXBsYWNlKCc6dG8nLCB0bykucmVwbGFjZSgnOmNoZXF1ZU51bWJlcicsIGNoZXF1ZU51bWJlcikpLm1hcCgocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPFJlY29uY2lsZVJlc3BvbnNlW10sIHN0cmluZz4gPSByZXMuanNvbigpO1xuICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgYWNjb3VudFVuaXF1ZU5hbWUsIGZyb20sIHRvLCBjaGVxdWVOdW1iZXIgfTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxSZWNvbmNpbGVSZXNwb25zZVtdLCBzdHJpbmc+KGUsICcnLCB7IGFjY291bnRVbmlxdWVOYW1lLCBmcm9tLCB0bywgY2hlcXVlTnVtYmVyIH0pKTtcbiAgfVxuXG4gIHB1YmxpYyBEb3dubG9hZEF0dGFjaGVtZW50KGZpbGVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxEb3dubG9hZExlZGdlckF0dGFjaG1lbnRSZXNwb25zZSwgc3RyaW5nPj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBMRURHRVJfQVBJLkRPV05MT0FEX0FUVEFDSE1FTlQucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKVxuICAgICAgLnJlcGxhY2UoJzpmaWxlTmFtZScsIGZpbGVOYW1lKSlcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPERvd25sb2FkTGVkZ2VyQXR0YWNobWVudFJlc3BvbnNlLCBzdHJpbmc+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gZmlsZU5hbWU7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGZpbGVOYW1lIH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8RG93bmxvYWRMZWRnZXJBdHRhY2htZW50UmVzcG9uc2UsIHN0cmluZz4oZSwgZmlsZU5hbWUsIHsgZmlsZU5hbWUgfSkpO1xuICB9XG5cbiAgcHVibGljIERvd25sb2FkSW52b2ljZShtb2RlbDogRG93bmxvYWRMZWRnZXJSZXF1ZXN0LCBhY2NvdW50VW5pcXVlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8c3RyaW5nLCBEb3dubG9hZExlZGdlclJlcXVlc3Q+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAucG9zdCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBMRURHRVJfQVBJLkRPV05MT0FEX0lOVk9JQ0UucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6YWNjb3VudFVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQoYWNjb3VudFVuaXF1ZU5hbWUpKSwgbW9kZWwpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxzdHJpbmcsIERvd25sb2FkTGVkZ2VyUmVxdWVzdD4gPSByZXMuanNvbigpO1xuICAgICAgICBkYXRhLnJlcXVlc3QgPSBtb2RlbDtcbiAgICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgYWNjb3VudFVuaXF1ZU5hbWUgfTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxzdHJpbmcsIERvd25sb2FkTGVkZ2VyUmVxdWVzdD4oZSwgbW9kZWwsIHsgYWNjb3VudFVuaXF1ZU5hbWUgfSkpO1xuICB9XG5cbiAgcHVibGljIEdlbmVyYXRlTWFnaWNMaW5rKG1vZGVsOiBNYWdpY0xpbmtSZXF1ZXN0LCBhY2NvdW50VW5pcXVlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8TWFnaWNMaW5rUmVzcG9uc2UsIE1hZ2ljTGlua1JlcXVlc3Q+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAucG9zdCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBMRURHRVJfQVBJLk1BR0lDX0xJTksucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKVxuICAgICAgLnJlcGxhY2UoJzphY2NvdW50VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudChhY2NvdW50VW5pcXVlTmFtZSkpXG4gICAgICAucmVwbGFjZSgnOmZyb20nLCBtb2RlbC5mcm9tKS5yZXBsYWNlKCc6dG8nLCBtb2RlbC50byksIG1vZGVsKVxuICAgICAgLm1hcCgocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8TWFnaWNMaW5rUmVzcG9uc2UsIE1hZ2ljTGlua1JlcXVlc3Q+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lIH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8TWFnaWNMaW5rUmVzcG9uc2UsIE1hZ2ljTGlua1JlcXVlc3Q+KGUsIG1vZGVsLCB7IGFjY291bnRVbmlxdWVOYW1lIH0pKTtcbiAgfVxuXG4gIHB1YmxpYyBFeHBvcnRMZWRnZXIobW9kZWw6IEV4cG9ydExlZGdlclJlcXVlc3QsIGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxzdHJpbmcsIEV4cG9ydExlZGdlclJlcXVlc3Q+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHRoaXMuY29uZmlnLmFwaVVybCArIExFREdFUl9BUEkuRVhQT1JUX0xFREdFUi5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpXG4gICAgICAucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSlcbiAgICAgIC5yZXBsYWNlKCc6ZnJvbScsIG1vZGVsLmZyb20pLnJlcGxhY2UoJzp0bycsIG1vZGVsLnRvKS5yZXBsYWNlKCc6dHlwZScsIGVuY29kZVVSSUNvbXBvbmVudChtb2RlbC50eXBlKSkpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxzdHJpbmcsIEV4cG9ydExlZGdlclJlcXVlc3Q+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lIH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8c3RyaW5nLCBFeHBvcnRMZWRnZXJSZXF1ZXN0PihlLCBtb2RlbCwgeyBhY2NvdW50VW5pcXVlTmFtZSB9KSk7XG4gIH1cblxuICBwdWJsaWMgTWFpbExlZGdlcihtb2RlbDogTWFpbExlZGdlclJlcXVlc3QsIGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcsIGZyb206IHN0cmluZyA9ICcnLCB0bzogc3RyaW5nID0gJycsIGZvcm1hdDogc3RyaW5nID0gJycpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxzdHJpbmcsIE1haWxMZWRnZXJSZXF1ZXN0Pj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLnBvc3QodGhpcy5jb25maWcuYXBpVXJsICsgTEVER0VSX0FQSS5NQUlMX0xFREdFUi5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpXG4gICAgICAucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSlcbiAgICAgIC5yZXBsYWNlKCc6ZnJvbScsIGZyb20pLnJlcGxhY2UoJzp0bycsIHRvKS5yZXBsYWNlKCc6Zm9ybWF0JywgZW5jb2RlVVJJQ29tcG9uZW50KGZvcm1hdCkpLCBtb2RlbClcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPHN0cmluZywgTWFpbExlZGdlclJlcXVlc3Q+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lLCBmcm9tLCB0bywgZm9ybWF0IH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8c3RyaW5nLCBNYWlsTGVkZ2VyUmVxdWVzdD4oZSwgbW9kZWwsIHsgYWNjb3VudFVuaXF1ZU5hbWUgfSkpO1xuICB9XG5cbiAgcHVibGljIEFkdmFuY2VTZWFyY2gobW9kZWw6IElMZWRnZXJBZHZhbmNlU2VhcmNoUmVxdWVzdCwgYWNjb3VudFVuaXF1ZU5hbWU6IHN0cmluZywgZnJvbTogc3RyaW5nID0gJycsIHRvOiBzdHJpbmcgPSAnJywgc29ydGluZ09yZGVyOiBzdHJpbmcgPSAnJywgcGFnZTogc3RyaW5nID0gJycsIGNvdW50OiBzdHJpbmcgPSAnJyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPElMZWRnZXJBZHZhbmNlU2VhcmNoUmVzcG9uc2UsIElMZWRnZXJBZHZhbmNlU2VhcmNoUmVxdWVzdD4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuY29uZmlnLmFwaVVybCArIExFREdFUl9BUEkuQURWQU5DRV9TRUFSQ0gucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKVxuICAgICAgLnJlcGxhY2UoJzphY2NvdW50VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudChhY2NvdW50VW5pcXVlTmFtZSkpXG4gICAgICAucmVwbGFjZSgnOmZyb21EYXRlJywgZnJvbSkucmVwbGFjZSgnOnRvRGF0ZScsIHRvKS5yZXBsYWNlKCc6c29ydGluZ09yZGVyJywgc29ydGluZ09yZGVyKS5yZXBsYWNlKCc6cGFnZScsIHBhZ2UpLnJlcGxhY2UoJzpjb3VudCcsIGVuY29kZVVSSUNvbXBvbmVudChjb3VudCkpLCBtb2RlbClcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPElMZWRnZXJBZHZhbmNlU2VhcmNoUmVzcG9uc2UsIElMZWRnZXJBZHZhbmNlU2VhcmNoUmVxdWVzdD4gPSByZXMuanNvbigpO1xuICAgICAgICBkYXRhLnJlcXVlc3QgPSBtb2RlbDtcbiAgICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgYWNjb3VudFVuaXF1ZU5hbWUsIGZyb20sIHRvLCBjb3VudCB9O1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPElMZWRnZXJBZHZhbmNlU2VhcmNoUmVzcG9uc2UsIElMZWRnZXJBZHZhbmNlU2VhcmNoUmVxdWVzdD4oZSwgbW9kZWwsIHsgYWNjb3VudFVuaXF1ZU5hbWUgfSkpO1xuICB9XG59XG4iXX0=