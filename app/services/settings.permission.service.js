"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpWrapper_service_1 = require("./httpWrapper.service");
var core_1 = require("@angular/core");
var catchmanger_1 = require("./catchManager/catchmanger");
var settings_permission_api_1 = require("./apiurls/settings.permission.api");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var SettingsPermissionService = (function () {
    function SettingsPermissionService(errorHandler, _http, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._generalService = _generalService;
        this.config = config;
    }
    /*
    * Get Users With Company Permissions
    */
    SettingsPermissionService.prototype.GetUsersWithCompanyPermissions = function (companyUniqueName) {
        var _this = this;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + settings_permission_api_1.SETTINGS_PERMISSION_API.GET.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /**
     * Update permission
     */
    SettingsPermissionService.prototype.UpdatePermission = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + settings_permission_api_1.SETTINGS_PERMISSION_API.UPDATE_PERMISSION.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':ueruniquename', model.uniqueName), model).map(function (res) {
            var data = res.json();
            data.request = model;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, model); });
    };
    return SettingsPermissionService;
}());
SettingsPermissionService = __decorate([
    core_1.Injectable(),
    __param(3, core_1.Optional()), __param(3, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService,
        general_service_1.GeneralService, Object])
], SettingsPermissionService);
exports.SettingsPermissionService = SettingsPermissionService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MucGVybWlzc2lvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2V0dGluZ3MucGVybWlzc2lvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsNkRBQTJEO0FBQzNELHNDQUE2RDtBQUU3RCwwREFBMEQ7QUFDMUQsNkVBQTRFO0FBRTVFLHFEQUFtRDtBQUNuRCxtREFBcUU7QUFHckUsSUFBYSx5QkFBeUI7SUFLcEMsbUNBQW9CLFlBQTBCLEVBQVUsS0FBeUIsRUFDN0QsZUFBK0IsRUFBNkMsTUFBMEI7UUFEdEcsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFvQjtRQUM3RCxvQkFBZSxHQUFmLGVBQWUsQ0FBZ0I7UUFBNkMsV0FBTSxHQUFOLE1BQU0sQ0FBb0I7SUFDMUgsQ0FBQztJQUVEOztNQUVFO0lBQ0ssa0VBQThCLEdBQXJDLFVBQXNDLGlCQUF5QjtRQUEvRCxpQkFPQztRQU5DLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxpREFBdUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHO1lBQ3hKLElBQUksSUFBSSxHQUE4QixHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDakQsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7WUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFjLENBQUMsQ0FBQyxFQUE3QyxDQUE2QyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksb0RBQWdCLEdBQXZCLFVBQXdCLEtBQXVCO1FBQS9DLGlCQVFDO1FBUEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsaURBQXVCLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHO1lBQ3pOLElBQUksSUFBSSxHQUE4RCxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDakYsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUE4QyxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQXBGLENBQW9GLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBRUgsZ0NBQUM7QUFBRCxDQUFDLEFBbENELElBa0NDO0FBbENZLHlCQUF5QjtJQURyQyxpQkFBVSxFQUFFO0lBTzJDLFdBQUEsZUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLGFBQU0sQ0FBQyw4QkFBYSxDQUFDLENBQUE7cUNBRHJELDBCQUFZLEVBQWlCLHdDQUFrQjtRQUM1QyxnQ0FBYztHQU54Qyx5QkFBeUIsQ0FrQ3JDO0FBbENZLDhEQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVzZXJEZXRhaWxzIH0gZnJvbSAnLi4vbW9kZWxzL2FwaS1tb2RlbHMvbG9naW5Nb2RlbHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBIdHRwV3JhcHBlclNlcnZpY2UgfSBmcm9tICcuL2h0dHBXcmFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL2FwaS1tb2RlbHMvQmFzZVJlc3BvbnNlJztcbmltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gJy4vY2F0Y2hNYW5hZ2VyL2NhdGNobWFuZ2VyJztcbmltcG9ydCB7IFNFVFRJTkdTX1BFUk1JU1NJT05fQVBJIH0gZnJvbSAnLi9hcGl1cmxzL3NldHRpbmdzLnBlcm1pc3Npb24uYXBpJztcbmltcG9ydCB7IElVcGRhdGVQZXJtaXNzaW9uUmVzcG9uc2UsIFNoYXJlUmVxdWVzdEZvcm0gfSBmcm9tICcuLi9tb2RlbHMvYXBpLW1vZGVscy9QZXJtaXNzaW9uJztcbmltcG9ydCB7IEdlbmVyYWxTZXJ2aWNlIH0gZnJvbSAnLi9nZW5lcmFsLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VydmljZUNvbmZpZywgSVNlcnZpY2VDb25maWdBcmdzIH0gZnJvbSAnLi9zZXJ2aWNlLmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1Blcm1pc3Npb25TZXJ2aWNlIHtcblxuICBwcml2YXRlIHVzZXI6IFVzZXJEZXRhaWxzO1xuICBwcml2YXRlIGNvbXBhbnlVbmlxdWVOYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlciwgcHJpdmF0ZSBfaHR0cDogSHR0cFdyYXBwZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICBwcml2YXRlIF9nZW5lcmFsU2VydmljZTogR2VuZXJhbFNlcnZpY2UsIEBPcHRpb25hbCgpIEBJbmplY3QoU2VydmljZUNvbmZpZykgcHJpdmF0ZSBjb25maWc6IElTZXJ2aWNlQ29uZmlnQXJncykge1xuICB9XG5cbiAgLypcbiAgKiBHZXQgVXNlcnMgV2l0aCBDb21wYW55IFBlcm1pc3Npb25zXG4gICovXG4gIHB1YmxpYyBHZXRVc2Vyc1dpdGhDb21wYW55UGVybWlzc2lvbnMoY29tcGFueVVuaXF1ZU5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPGFueSwgc3RyaW5nPj4ge1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5jb25maWcuYXBpVXJsICsgU0VUVElOR1NfUEVSTUlTU0lPTl9BUEkuR0VULnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkpLm1hcCgocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPGFueSwgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnF1ZXJ5U3RyaW5nID0ge307XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8YW55LCBzdHJpbmc+KGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgcGVybWlzc2lvblxuICAgKi9cbiAgcHVibGljIFVwZGF0ZVBlcm1pc3Npb24obW9kZWw6IFNoYXJlUmVxdWVzdEZvcm0pOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxJVXBkYXRlUGVybWlzc2lvblJlc3BvbnNlLCBTaGFyZVJlcXVlc3RGb3JtPj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLnB1dCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBTRVRUSU5HU19QRVJNSVNTSU9OX0FQSS5VUERBVEVfUEVSTUlTU0lPTi5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzp1ZXJ1bmlxdWVuYW1lJywgbW9kZWwudW5pcXVlTmFtZSksIG1vZGVsKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxJVXBkYXRlUGVybWlzc2lvblJlc3BvbnNlLCBTaGFyZVJlcXVlc3RGb3JtPiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnJlcXVlc3QgPSBtb2RlbDtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxJVXBkYXRlUGVybWlzc2lvblJlc3BvbnNlLCBTaGFyZVJlcXVlc3RGb3JtPihlLCBtb2RlbCkpO1xuICB9XG5cbn1cbiJdfQ==