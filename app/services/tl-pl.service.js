"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
require("rxjs/add/operator/map");
var httpWrapper_service_1 = require("./httpWrapper.service");
var router_1 = require("@angular/router");
var catchmanger_1 = require("./catchManager/catchmanger");
var tl_pl_api_1 = require("./apiurls/tl-pl.api");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var TlPlService = (function () {
    function TlPlService(errorHandler, _http, _router, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._router = _router;
        this._generalService = _generalService;
        this.config = config;
        this.b64toBlob = function (b64Data, contentType, sliceSize) {
            var blob;
            var byteArray;
            var byteArrays;
            var byteCharacters;
            var byteNumbers;
            var i;
            var offset;
            var slice;
            contentType = contentType || '';
            sliceSize = sliceSize || 512;
            byteCharacters = atob(b64Data);
            byteArrays = [];
            offset = 0;
            while (offset < byteCharacters.length) {
                slice = byteCharacters.slice(offset, offset + sliceSize);
                byteNumbers = new Array(slice.length);
                i = 0;
                while (i < slice.length) {
                    byteNumbers[i] = slice.charCodeAt(i);
                    i++;
                }
                byteArray = new Uint8Array(byteNumbers);
                byteArrays.push(byteArray);
                offset += sliceSize;
            }
            blob = new Blob(byteArrays, {
                type: contentType
            });
            return blob;
        };
    }
    /**
     * Get Trial Balance
     */
    TlPlService.prototype.GetTrailBalance = function (request) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + tl_pl_api_1.TB_PL_BS_API.GET_TRIAL_BALANCE
            .replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), { from: request.from, to: request.to, refresh: request.refresh })
            .map(function (res) {
            var data = res.json();
            data.request = request;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, request); });
    };
    /**
     * get Profit/Loss
     */
    TlPlService.prototype.GetProfitLoss = function (request) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var filteredRequest = (Object.keys(request)
            .filter(function (p) { return request[p] != null; })
            .reduce(function (r, i) {
            return (__assign({}, r, (_a = {}, _a[i] = request[i], _a)));
            var _a;
        }, {}));
        return this._http.get(this.config.apiUrl + tl_pl_api_1.TB_PL_BS_API.GET_PROFIT_LOSS
            .replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), filteredRequest)
            .map(function (res) {
            var data = res.json();
            data.request = request;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, request); });
    };
    /**
     * get BalanceSheet
     */
    TlPlService.prototype.GetBalanceSheet = function (request) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var filteredRequest = (Object.keys(request)
            .filter(function (p) { return request[p] != null; })
            .reduce(function (r, i) {
            return (__assign({}, r, (_a = {}, _a[i] = request[i], _a)));
            var _a;
        }, {}));
        return this._http.get(this.config.apiUrl + tl_pl_api_1.TB_PL_BS_API.GET_BALANCE_SHEET
            .replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), filteredRequest)
            .map(function (res) {
            var data = res.json();
            data.request = request;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    TlPlService.prototype.DownloadTrialBalanceExcel = function (request) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + tl_pl_api_1.TB_PL_BS_API.DOWNLOAD_TRIAL_BALANCE_EXCEL
            .replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), request)
            .map(function (res) {
            var data = _this.b64toBlob(res.json().body, 'application/xml', 512);
            return res.json();
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    TlPlService.prototype.DownloadBalanceSheetExcel = function (request) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var filteredRequest = (Object.keys(request)
            .filter(function (p) { return request[p] != null; })
            .reduce(function (r, i) {
            return (__assign({}, r, (_a = {}, _a[i] = request[i], _a)));
            var _a;
        }, {}));
        return this._http.get(this.config.apiUrl + tl_pl_api_1.TB_PL_BS_API.DOWNLOAD_BALANCE_SHEET_EXCEL
            .replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), filteredRequest)
            .map(function (res) {
            var data = _this.b64toBlob(res.json().body, 'application/xml', 512);
            return res.json();
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    TlPlService.prototype.DownloadProfitLossExcel = function (request) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var filteredRequest = (Object.keys(request)
            .filter(function (p) { return request[p] != null; })
            .reduce(function (r, i) {
            return (__assign({}, r, (_a = {}, _a[i] = request[i], _a)));
            var _a;
        }, {}));
        return this._http.get(this.config.apiUrl + tl_pl_api_1.TB_PL_BS_API.DOWNLOAD_PROFIT_LOSS_EXCEL
            .replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), filteredRequest)
            .map(function (res) {
            var data = _this.b64toBlob(res.json().body, 'application/xml', 512);
            return res.json();
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    return TlPlService;
}());
TlPlService = __decorate([
    core_1.Injectable(),
    __param(4, core_1.Optional()), __param(4, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService, router_1.Router,
        general_service_1.GeneralService, Object])
], TlPlService);
exports.TlPlService = TlPlService;
//# sourceMappingURL=data:application/json;base64,