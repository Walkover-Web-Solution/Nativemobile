"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpWrapper_service_1 = require("./httpWrapper.service");
var core_1 = require("@angular/core");
var catchmanger_1 = require("./catchManager/catchmanger");
var settings_financial_year_api_1 = require("./apiurls/settings.financial-year.api");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var SettingsFinancialYearService = (function () {
    function SettingsFinancialYearService(errorHandler, _http, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._generalService = _generalService;
        this.config = config;
    }
    /*
    * Get All Financial Years
    * API: 'company/:companyUniqueName/financial-year'
    * Method: GET
    */
    SettingsFinancialYearService.prototype.GetAllFinancialYears = function () {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + settings_financial_year_api_1.SETTINGS_FINANCIAL_YEAR_API.GET_ALL_FINANCIAL_YEARS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /*
    * Lock Financial Year
    * API: 'company/:companyUniqueName/financial-year-lock'
    * Method: PATCH
    */
    SettingsFinancialYearService.prototype.LockFinancialYear = function (reqObj) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.patch(this.config.apiUrl + settings_financial_year_api_1.SETTINGS_FINANCIAL_YEAR_API.LOCK_FINANCIAL_YEAR.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), reqObj).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /*
    * Unlock Financial Year
    * API: 'company/:companyUniqueName/financial-year-unlock'
    * Method: PATCH
    */
    SettingsFinancialYearService.prototype.UnlockFinancialYear = function (reqObj) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.patch(this.config.apiUrl + settings_financial_year_api_1.SETTINGS_FINANCIAL_YEAR_API.UNLOCK_FINANCIAL_YEAR.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), reqObj).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /*
    * Switch Financial Year
    * API: 'company/:companyUniqueName/financial-year-unlock'
    * Method: PATCH
    */
    SettingsFinancialYearService.prototype.SwitchFinancialYear = function (uniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.patch(this.config.apiUrl + settings_financial_year_api_1.SETTINGS_FINANCIAL_YEAR_API.SWITCH_FINANCIAL_YEAR.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), { uniqueName: uniqueName }).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /*
    * Add Financial Year
    * API: 'company/:companyUniqueName/financial-year'
    * Method: PATCH
    */
    SettingsFinancialYearService.prototype.AddFinancialYear = function (fromYear) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + settings_financial_year_api_1.SETTINGS_FINANCIAL_YEAR_API.ADD_FINANCIAL_YEAR.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), { fromYear: fromYear }).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    return SettingsFinancialYearService;
}());
SettingsFinancialYearService = __decorate([
    core_1.Injectable(),
    __param(3, core_1.Optional()), __param(3, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService,
        general_service_1.GeneralService, Object])
], SettingsFinancialYearService);
exports.SettingsFinancialYearService = SettingsFinancialYearService;
//# sourceMappingURL=data:application/json;base64,