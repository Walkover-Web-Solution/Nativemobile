"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpWrapper_service_1 = require("./httpWrapper.service");
var core_1 = require("@angular/core");
var account_api_1 = require("./apiurls/account.api");
var catchmanger_1 = require("./catchManager/catchmanger");
var applyTax_api_1 = require("./apiurls/applyTax.api");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var AccountService = (function () {
    function AccountService(errorHandler, _http, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._generalService = _generalService;
        this.config = config;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
    }
    AccountService.prototype.ngOnInit = function () {
        //
    };
    /**
     * Create Account Service
     */
    AccountService.prototype.CreateAccount = function (model, groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + account_api_1.ACCOUNTS_API.CREATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { groupUniqueName: groupUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, { groupUniqueName: groupUniqueName }); });
    };
    AccountService.prototype.UpdateAccount = function (model, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + account_api_1.ACCOUNTS_API.UPDATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', accountUniqueName), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.GetAccountDetails = function (accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + account_api_1.ACCOUNTS_API.DETAILS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName))).map(function (res) {
            var data = res.json();
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.GetAccountUniqueName = function (accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + account_api_1.ACCOUNTS_API.DETAILS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName))).map(function (res) {
            var data = res.json();
            data.queryString = { accountUniqueName: accountUniqueName };
            data.request = accountUniqueName;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.MergeAccount = function (model, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + account_api_1.ACCOUNTS_API.MERGE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.UnmergeAccount = function (model, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + account_api_1.ACCOUNTS_API.UNMERGE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.ApplyTax = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var mod = [];
        mod.push(model);
        return this._http.post(this.config.apiUrl + applyTax_api_1.APPLY_TAX_API.APPLY_TAX.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), mod)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.AccountMove = function (model, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + account_api_1.ACCOUNTS_API.MOVE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.AccountShare = function (model, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + account_api_1.ACCOUNTS_API.SHARE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.Share = function (model, roleUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + account_api_1.ACCOUNTS_API.SHARE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':roleUniqueName', encodeURIComponent(roleUniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { roleUniqueName: roleUniqueName, entity: model.entity, entityUniqueName: model.entityUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.UnShare = function (entryUniqueName, entity, entityUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.delete(this.config.apiUrl + account_api_1.ACCOUNTS_API.CHANGE_PERMISSION.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':assignRoleEntryUniqueName', encodeURIComponent(entryUniqueName)))
            .map(function (res) {
            var data = res.json();
            data.queryString = { entryUniqueName: entryUniqueName, entityUniqueName: entityUniqueName, entity: entity };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.UpdateEntityPermission = function (model, entity, newRoleUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + account_api_1.ACCOUNTS_API.CHANGE_PERMISSION.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':assignRoleEntryUniqueName', encodeURIComponent(model.uniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.queryString = { model: model, newRoleUniqueName: newRoleUniqueName, entity: entity };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.AccountUnshare = function (userEmail, accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + account_api_1.ACCOUNTS_API.CHANGE_PERMISSION.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)), { user: userEmail }).map(function (res) {
            var data = res.json();
            data.request = userEmail;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.AccountShareWith = function (accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + account_api_1.ACCOUNTS_API.SHARED_WITH.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName)))
            .map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.DeleteAccount = function (accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.delete(this.config.apiUrl + account_api_1.ACCOUNTS_API.DELETE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName))).map(function (res) {
            var data = res.json();
            data.request = accountUniqueName;
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, accountUniqueName, { accountUniqueName: accountUniqueName }); });
    };
    AccountService.prototype.GetFlattenAccounts = function (q, page, count) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + account_api_1.ACCOUNTS_API.FLATTEN_ACCOUNTS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':q', encodeURIComponent(q || '')).replace(':count', count || '').replace(':page', encodeURIComponent(page || ''))).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = { q: q, page: page, count: count };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.GetFlatternAccountsOfGroup = function (groupUniqueNames, count, q, page) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + account_api_1.ACCOUNTS_API.FLATTEN_ACCOUNTS_OF_GROUPS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':count', count || 0).replace(':q', encodeURIComponent(q || '')).replace(':page', encodeURIComponent(page || 1)), groupUniqueNames).map(function (res) {
            var data = res.json();
            data.request = groupUniqueNames;
            data.queryString = { count: count, q: q, page: page };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.GetTaxHierarchy = function (accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + account_api_1.ACCOUNTS_API.TAX_HIERARCHY.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName))).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /**
     * accounts v2 api's
     */
    AccountService.prototype.GetAccountDetailsV2 = function (accountUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + account_api_1.ACCOUNTS_API_V2.GET.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':accountUniqueName', encodeURIComponent(accountUniqueName))).map(function (res) {
            var data = res.json();
            data.queryString = { accountUniqueName: accountUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AccountService.prototype.CreateAccountV2 = function (model, groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + account_api_1.ACCOUNTS_API_V2.CREATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName)), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { groupUniqueName: groupUniqueName };
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model, { groupUniqueName: groupUniqueName }); });
    };
    AccountService.prototype.UpdateAccountV2 = function (model, reqObj) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + account_api_1.ACCOUNTS_API_V2.UPDATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))
            .replace(':groupUniqueName', encodeURIComponent(reqObj.groupUniqueName))
            .replace(':accountUniqueName', reqObj.accountUniqueName), model)
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = reqObj;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    return AccountService;
}());
AccountService = __decorate([
    core_1.Injectable(),
    __param(3, core_1.Optional()), __param(3, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService,
        general_service_1.GeneralService, Object])
], AccountService);
exports.AccountService = AccountService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWNjb3VudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsNkRBQTJEO0FBQzNELHNDQUFxRTtBQUNyRSxxREFBc0U7QUFHdEUsMERBQTBEO0FBQzFELHVEQUF1RDtBQUV2RCxxREFBbUQ7QUFDbkQsbURBQXFFO0FBR3JFLElBQWEsY0FBYztJQUt6Qix3QkFBb0IsWUFBMEIsRUFBVSxLQUF5QixFQUN2RSxlQUErQixFQUE2QyxNQUEwQjtRQUQ1RixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUFVLFVBQUssR0FBTCxLQUFLLENBQW9CO1FBQ3ZFLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQUE2QyxXQUFNLEdBQU4sTUFBTSxDQUFvQjtRQUM5RyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO0lBQ2xFLENBQUM7SUFFTSxpQ0FBUSxHQUFmO1FBQ0UsRUFBRTtJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLHNDQUFhLEdBQXBCLFVBQXFCLEtBQXFCLEVBQUUsZUFBdUI7UUFBbkUsaUJBV0M7UUFWQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7YUFDL00sR0FBRyxDQUFDLFVBQUMsR0FBRztZQUNQLElBQUksSUFBSSxHQUFrRCxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDckUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLGVBQWUsaUJBQUEsRUFBRSxDQUFDO1lBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBa0MsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLGVBQWUsaUJBQUEsRUFBRSxDQUFDLEVBQTdGLENBQTZGLENBQUMsQ0FBQztJQUNqSCxDQUFDO0lBRU0sc0NBQWEsR0FBcEIsVUFBcUIsS0FBcUIsRUFBRSxpQkFBeUI7UUFBckUsaUJBV0M7UUFWQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsaUJBQWlCLENBQUMsRUFBRSxLQUFLLENBQUM7YUFDOUwsR0FBRyxDQUFDLFVBQUMsR0FBRztZQUNQLElBQUksSUFBSSxHQUFrRCxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDckUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLGlCQUFpQixtQkFBQSxFQUFFLENBQUM7WUFDekMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFrQyxDQUFDLENBQUMsRUFBakUsQ0FBaUUsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFTSwwQ0FBaUIsR0FBeEIsVUFBeUIsaUJBQXlCO1FBQWxELGlCQVFDO1FBUEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsMEJBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDdE4sSUFBSSxJQUFJLEdBQTBDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUM3RCxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsaUJBQWlCLG1CQUFBLEVBQUUsQ0FBQztZQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQTBCLENBQUMsQ0FBQyxFQUF6RCxDQUF5RCxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVNLDZDQUFvQixHQUEzQixVQUE0QixpQkFBeUI7UUFBckQsaUJBU0M7UUFSQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBRztZQUN0TixJQUFJLElBQUksR0FBMEMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzdELElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxpQkFBaUIsbUJBQUEsRUFBRSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsaUJBQWlCLENBQUM7WUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUEwQixDQUFDLENBQUMsRUFBekQsQ0FBeUQsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFTSxxQ0FBWSxHQUFuQixVQUFvQixLQUE0QixFQUFFLGlCQUF5QjtRQUEzRSxpQkFXQztRQVZDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUM7UUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLDBCQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO2FBQ2pOLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDUCxJQUFJLElBQUksR0FBZ0QsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ25FLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxpQkFBaUIsbUJBQUEsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBZ0MsQ0FBQyxDQUFDLEVBQS9ELENBQStELENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRU0sdUNBQWMsR0FBckIsVUFBc0IsS0FBNEIsRUFBRSxpQkFBeUI7UUFBN0UsaUJBV0M7UUFWQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQzthQUNwTixHQUFHLENBQUMsVUFBQyxHQUFHO1lBQ1AsSUFBSSxJQUFJLEdBQWdELEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNuRSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsaUJBQWlCLG1CQUFBLEVBQUUsQ0FBQztZQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQWdDLENBQUMsQ0FBQyxFQUEvRCxDQUErRCxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVNLGlDQUFRLEdBQWYsVUFBZ0IsS0FBc0I7UUFBdEMsaUJBWUM7UUFYQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLDRCQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQzthQUNoSixHQUFHLENBQUMsVUFBQyxHQUFHO1lBQ1AsSUFBSSxJQUFJLEdBQTBDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUM3RCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQTBCLENBQUMsQ0FBQyxFQUF6RCxDQUF5RCxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVNLG9DQUFXLEdBQWxCLFVBQW1CLEtBQXlCLEVBQUUsaUJBQXlCO1FBQXZFLGlCQVdDO1FBVkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsMEJBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7YUFDaE4sR0FBRyxDQUFDLFVBQUMsR0FBRztZQUNQLElBQUksSUFBSSxHQUE2QyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLGlCQUFpQixtQkFBQSxFQUFFLENBQUM7WUFDekMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUE2QixDQUFDLENBQUMsRUFBNUQsQ0FBNEQsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTSxxQ0FBWSxHQUFuQixVQUFvQixLQUEwQixFQUFFLGlCQUF5QjtRQUF6RSxpQkFXQztRQVZDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUM7UUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLDBCQUFZLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO2FBQ2pOLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDUCxJQUFJLElBQUksR0FBOEMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2pFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxpQkFBaUIsbUJBQUEsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBOEIsQ0FBQyxDQUFDLEVBQTdELENBQTZELENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRU0sOEJBQUssR0FBWixVQUFhLEtBQXlCLEVBQUUsY0FBc0I7UUFBOUQsaUJBV0M7UUFWQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7YUFDNU0sR0FBRyxDQUFDLFVBQUMsR0FBRztZQUNQLElBQUksSUFBSSxHQUE2QyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7WUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLGNBQWMsZ0JBQUEsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN0RyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQTZCLENBQUMsQ0FBQyxFQUE1RCxDQUE0RCxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVNLGdDQUFPLEdBQWQsVUFBZSxlQUF1QixFQUFFLE1BQWMsRUFBRSxnQkFBd0I7UUFBaEYsaUJBVUM7UUFUQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO2FBQy9OLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDUCxJQUFJLElBQUksR0FBNkMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2hFLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxlQUFlLGlCQUFBLEVBQUUsZ0JBQWdCLGtCQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQztZQUNqRSxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQTZCLENBQUMsQ0FBQyxFQUE1RCxDQUE0RCxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVNLCtDQUFzQixHQUE3QixVQUE4QixLQUF1QixFQUFFLE1BQWMsRUFBRSxpQkFBeUI7UUFBaEcsaUJBV0M7UUFWQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBRWhFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUM7YUFDcE8sR0FBRyxDQUFDLFVBQUMsR0FBRztZQUNQLElBQUksSUFBSSxHQUE2QyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLEtBQUssT0FBQSxFQUFFLGlCQUFpQixtQkFBQSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUM7WUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUE2QixDQUFDLENBQUMsRUFBNUQsQ0FBNEQsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFTSx1Q0FBYyxHQUFyQixVQUFzQixTQUFpQixFQUFFLGlCQUF5QjtRQUFsRSxpQkFVQztRQVRDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUM7UUFFaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLDBCQUFZLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDclAsSUFBSSxJQUFJLEdBQWlDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwRCxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztZQUN6QixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsaUJBQWlCLG1CQUFBLEVBQUUsQ0FBQztZQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQWlCLENBQUMsQ0FBQyxFQUFoRCxDQUFnRCxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVNLHlDQUFnQixHQUF2QixVQUF3QixpQkFBeUI7UUFBakQsaUJBV0M7UUFWQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO2FBQ2hOLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDUCxJQUFJLElBQUksR0FBc0QsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pFLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxpQkFBaUIsbUJBQUEsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBc0MsQ0FBQyxDQUFDLEVBQXJFLENBQXFFLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBRU0sc0NBQWEsR0FBcEIsVUFBcUIsaUJBQXlCO1FBQTlDLGlCQVNDO1FBUkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsMEJBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDeE4sSUFBSSxJQUFJLEdBQWlDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwRCxJQUFJLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDO1lBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxpQkFBaUIsbUJBQUEsRUFBRSxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBaUIsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLEVBQUUsaUJBQWlCLG1CQUFBLEVBQUUsQ0FBQyxFQUExRixDQUEwRixDQUFDLENBQUM7SUFDOUcsQ0FBQztJQUVNLDJDQUFrQixHQUF6QixVQUEwQixDQUFVLEVBQUUsSUFBYSxFQUFFLEtBQWM7UUFBbkUsaUJBU0M7UUFSQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDclIsSUFBSSxJQUFJLEdBQWtELEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyRSxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxHQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQztZQUN0QyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQWtDLENBQUMsQ0FBQyxFQUFqRSxDQUFpRSxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVNLG1EQUEwQixHQUFqQyxVQUFrQyxnQkFBZ0QsRUFBRSxLQUFXLEVBQUUsQ0FBVSxFQUFFLElBQVU7UUFBdkgsaUJBU0M7UUFSQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRywwQkFBWSxDQUFDLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDaFQsSUFBSSxJQUFJLEdBQTBFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUM3RixJQUFJLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDO1lBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDLEdBQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBMEQsQ0FBQyxDQUFDLEVBQXpGLENBQXlGLENBQUMsQ0FBQztJQUM3RyxDQUFDO0lBRU0sd0NBQWUsR0FBdEIsVUFBdUIsaUJBQXlCO1FBQWhELGlCQVNDO1FBUkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsMEJBQVksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDNU4sSUFBSSxJQUFJLEdBQXVELEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxRSxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsaUJBQWlCLG1CQUFBLEVBQUUsQ0FBQztZQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQXVDLENBQUMsQ0FBQyxFQUF0RSxDQUFzRSxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNENBQW1CLEdBQTFCLFVBQTJCLGlCQUF5QjtRQUFwRCxpQkFRQztRQVBDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUM7UUFDaEUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLDZCQUFlLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsRUFBRSxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFHO1lBQ3JOLElBQUksSUFBSSxHQUE0QyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDL0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLGlCQUFpQixtQkFBQSxFQUFFLENBQUM7WUFDekMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUE0QixDQUFDLENBQUMsRUFBM0QsQ0FBMkQsQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFFTSx3Q0FBZSxHQUF0QixVQUF1QixLQUF1QixFQUFFLGVBQXVCO1FBQXZFLGlCQVdDO1FBVkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsNkJBQWUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO2FBQ2xOLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDUCxJQUFJLElBQUksR0FBc0QsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxlQUFlLGlCQUFBLEVBQUUsQ0FBQztZQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQXNDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxlQUFlLGlCQUFBLEVBQUUsQ0FBQyxFQUFqRyxDQUFpRyxDQUFDLENBQUM7SUFDckgsQ0FBQztJQUVNLHdDQUFlLEdBQXRCLFVBQXVCLEtBQXVCLEVBQUUsTUFBOEQ7UUFBOUcsaUJBYUM7UUFaQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyw2QkFBZSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDeEksT0FBTyxDQUFDLGtCQUFrQixFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQzthQUN2RSxPQUFPLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsS0FBSyxDQUFDO2FBQy9ELEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDUCxJQUFJLElBQUksR0FBc0QsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3pFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBc0MsQ0FBQyxDQUFDLEVBQXJFLENBQXFFLENBQUMsQ0FBQztJQUN6RixDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBdFJELElBc1JDO0FBdFJZLGNBQWM7SUFEMUIsaUJBQVUsRUFBRTtJQU9pQyxXQUFBLGVBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxhQUFNLENBQUMsOEJBQWEsQ0FBQyxDQUFBO3FDQUQzQywwQkFBWSxFQUFpQix3Q0FBa0I7UUFDdEQsZ0NBQWM7R0FOOUIsY0FBYyxDQXNSMUI7QUF0Ulksd0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaGFyZVJlcXVlc3RGb3JtIH0gZnJvbSAnLi4vbW9kZWxzL2FwaS1tb2RlbHMvUGVybWlzc2lvbic7XG5pbXBvcnQgeyBBY2NvdW50TWVyZ2VSZXF1ZXN0LCBBY2NvdW50TW92ZVJlcXVlc3QsIEFjY291bnRSZXF1ZXN0LCBBY2NvdW50UmVxdWVzdFYyLCBBY2NvdW50UmVzcG9uc2UsIEFjY291bnRSZXNwb25zZVYyLCBBY2NvdW50U2hhcmVkV2l0aFJlc3BvbnNlLCBBY2NvdW50c1RheEhpZXJhcmNoeVJlc3BvbnNlLCBBY2NvdW50VW5NZXJnZVJlcXVlc3QsIEZsYXR0ZW5BY2NvdW50c1Jlc3BvbnNlLCBTaGFyZUFjY291bnRSZXF1ZXN0LCBTaGFyZUVudGl0eVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvYXBpLW1vZGVscy9BY2NvdW50JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgSHR0cFdyYXBwZXJTZXJ2aWNlIH0gZnJvbSAnLi9odHRwV3JhcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUsIE9uSW5pdCwgSW5qZWN0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQUNDT1VOVFNfQVBJLCBBQ0NPVU5UU19BUElfVjIgfSBmcm9tICcuL2FwaXVybHMvYWNjb3VudC5hcGknO1xuaW1wb3J0IHsgVXNlckRldGFpbHMgfSBmcm9tICcuLi9tb2RlbHMvYXBpLW1vZGVscy9sb2dpbk1vZGVscyc7XG5pbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvYXBpLW1vZGVscy9CYXNlUmVzcG9uc2UnO1xuaW1wb3J0IHsgRXJyb3JIYW5kbGVyIH0gZnJvbSAnLi9jYXRjaE1hbmFnZXIvY2F0Y2htYW5nZXInO1xuaW1wb3J0IHsgQVBQTFlfVEFYX0FQSSB9IGZyb20gJy4vYXBpdXJscy9hcHBseVRheC5hcGknO1xuaW1wb3J0IHsgQXBwbHlUYXhSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL2FwaS1tb2RlbHMvQXBwbHlUYXgnO1xuaW1wb3J0IHsgR2VuZXJhbFNlcnZpY2UgfSBmcm9tICcuL2dlbmVyYWwuc2VydmljZSc7XG5pbXBvcnQgeyBTZXJ2aWNlQ29uZmlnLCBJU2VydmljZUNvbmZpZ0FyZ3MgfSBmcm9tICcuL3NlcnZpY2UuY29uZmlnJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjY291bnRTZXJ2aWNlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwcml2YXRlIHVzZXI6IFVzZXJEZXRhaWxzO1xuICBwcml2YXRlIGNvbXBhbnlVbmlxdWVOYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlciwgcHJpdmF0ZSBfaHR0cDogSHR0cFdyYXBwZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgX2dlbmVyYWxTZXJ2aWNlOiBHZW5lcmFsU2VydmljZSwgQE9wdGlvbmFsKCkgQEluamVjdChTZXJ2aWNlQ29uZmlnKSBwcml2YXRlIGNvbmZpZzogSVNlcnZpY2VDb25maWdBcmdzKSB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgLy9cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgQWNjb3VudCBTZXJ2aWNlXG4gICAqL1xuICBwdWJsaWMgQ3JlYXRlQWNjb3VudChtb2RlbDogQWNjb3VudFJlcXVlc3QsIGdyb3VwVW5pcXVlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8QWNjb3VudFJlc3BvbnNlLCBBY2NvdW50UmVxdWVzdD4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuY29uZmlnLmFwaVVybCArIEFDQ09VTlRTX0FQSS5DUkVBVEUucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6Z3JvdXBVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGdyb3VwVW5pcXVlTmFtZSkpLCBtb2RlbClcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPEFjY291bnRSZXNwb25zZSwgQWNjb3VudFJlcXVlc3Q+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGdyb3VwVW5pcXVlTmFtZSB9O1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPEFjY291bnRSZXNwb25zZSwgQWNjb3VudFJlcXVlc3Q+KGUsIG1vZGVsLCB7IGdyb3VwVW5pcXVlTmFtZSB9KSk7XG4gIH1cblxuICBwdWJsaWMgVXBkYXRlQWNjb3VudChtb2RlbDogQWNjb3VudFJlcXVlc3QsIGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxBY2NvdW50UmVzcG9uc2UsIEFjY291bnRSZXF1ZXN0Pj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLnB1dCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUEkuVVBEQVRFLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgYWNjb3VudFVuaXF1ZU5hbWUpLCBtb2RlbClcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPEFjY291bnRSZXNwb25zZSwgQWNjb3VudFJlcXVlc3Q+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lIH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8QWNjb3VudFJlc3BvbnNlLCBBY2NvdW50UmVxdWVzdD4oZSkpO1xuICB9XG5cbiAgcHVibGljIEdldEFjY291bnREZXRhaWxzKGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxBY2NvdW50UmVzcG9uc2UsIHN0cmluZz4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5jb25maWcuYXBpVXJsICsgQUNDT1VOVFNfQVBJLkRFVEFJTFMucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6YWNjb3VudFVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQoYWNjb3VudFVuaXF1ZU5hbWUpKSkubWFwKChyZXMpID0+IHtcbiAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8QWNjb3VudFJlc3BvbnNlLCBzdHJpbmc+ID0gcmVzLmpzb24oKTtcbiAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lIH07XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8QWNjb3VudFJlc3BvbnNlLCBzdHJpbmc+KGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBHZXRBY2NvdW50VW5pcXVlTmFtZShhY2NvdW50VW5pcXVlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8QWNjb3VudFJlc3BvbnNlLCBzdHJpbmc+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHRoaXMuY29uZmlnLmFwaVVybCArIEFDQ09VTlRTX0FQSS5ERVRBSUxTLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSkpLm1hcCgocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPEFjY291bnRSZXNwb25zZSwgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnF1ZXJ5U3RyaW5nID0geyBhY2NvdW50VW5pcXVlTmFtZSB9O1xuICAgICAgZGF0YS5yZXF1ZXN0ID0gYWNjb3VudFVuaXF1ZU5hbWU7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8QWNjb3VudFJlc3BvbnNlLCBzdHJpbmc+KGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBNZXJnZUFjY291bnQobW9kZWw6IEFjY291bnRNZXJnZVJlcXVlc3RbXSwgYWNjb3VudFVuaXF1ZU5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPHN0cmluZywgQWNjb3VudE1lcmdlUmVxdWVzdFtdPj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLnB1dCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUEkuTUVSR0UucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6YWNjb3VudFVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQoYWNjb3VudFVuaXF1ZU5hbWUpKSwgbW9kZWwpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxzdHJpbmcsIEFjY291bnRNZXJnZVJlcXVlc3RbXT4gPSByZXMuanNvbigpO1xuICAgICAgICBkYXRhLnJlcXVlc3QgPSBtb2RlbDtcbiAgICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgYWNjb3VudFVuaXF1ZU5hbWUgfTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxzdHJpbmcsIEFjY291bnRNZXJnZVJlcXVlc3RbXT4oZSkpO1xuICB9XG5cbiAgcHVibGljIFVubWVyZ2VBY2NvdW50KG1vZGVsOiBBY2NvdW50VW5NZXJnZVJlcXVlc3QsIGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxzdHJpbmcsIEFjY291bnRVbk1lcmdlUmVxdWVzdD4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuY29uZmlnLmFwaVVybCArIEFDQ09VTlRTX0FQSS5VTk1FUkdFLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSksIG1vZGVsKVxuICAgICAgLm1hcCgocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8c3RyaW5nLCBBY2NvdW50VW5NZXJnZVJlcXVlc3Q+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lIH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8c3RyaW5nLCBBY2NvdW50VW5NZXJnZVJlcXVlc3Q+KGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBBcHBseVRheChtb2RlbDogQXBwbHlUYXhSZXF1ZXN0KTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8c3RyaW5nLCBBcHBseVRheFJlcXVlc3Q+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgbGV0IG1vZCA9IFtdO1xuICAgIG1vZC5wdXNoKG1vZGVsKTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuY29uZmlnLmFwaVVybCArIEFQUExZX1RBWF9BUEkuQVBQTFlfVEFYLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSksIG1vZClcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPHN0cmluZywgQXBwbHlUYXhSZXF1ZXN0PiA9IHJlcy5qc29uKCk7XG4gICAgICAgIGRhdGEucmVxdWVzdCA9IG1vZGVsO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPHN0cmluZywgQXBwbHlUYXhSZXF1ZXN0PihlKSk7XG4gIH1cblxuICBwdWJsaWMgQWNjb3VudE1vdmUobW9kZWw6IEFjY291bnRNb3ZlUmVxdWVzdCwgYWNjb3VudFVuaXF1ZU5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPHN0cmluZywgQWNjb3VudE1vdmVSZXF1ZXN0Pj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLnB1dCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUEkuTU9WRS5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzphY2NvdW50VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudChhY2NvdW50VW5pcXVlTmFtZSkpLCBtb2RlbClcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPHN0cmluZywgQWNjb3VudE1vdmVSZXF1ZXN0PiA9IHJlcy5qc29uKCk7XG4gICAgICAgIGRhdGEucmVxdWVzdCA9IG1vZGVsO1xuICAgICAgICBkYXRhLnF1ZXJ5U3RyaW5nID0geyBhY2NvdW50VW5pcXVlTmFtZSB9O1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPHN0cmluZywgQWNjb3VudE1vdmVSZXF1ZXN0PihlKSk7XG4gIH1cblxuICBwdWJsaWMgQWNjb3VudFNoYXJlKG1vZGVsOiBTaGFyZUFjY291bnRSZXF1ZXN0LCBhY2NvdW50VW5pcXVlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8c3RyaW5nLCBTaGFyZUFjY291bnRSZXF1ZXN0Pj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLnB1dCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUEkuU0hBUkUucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6YWNjb3VudFVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQoYWNjb3VudFVuaXF1ZU5hbWUpKSwgbW9kZWwpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxzdHJpbmcsIFNoYXJlQWNjb3VudFJlcXVlc3Q+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lIH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8c3RyaW5nLCBTaGFyZUFjY291bnRSZXF1ZXN0PihlKSk7XG4gIH1cblxuICBwdWJsaWMgU2hhcmUobW9kZWw6IFNoYXJlRW50aXR5UmVxdWVzdCwgcm9sZVVuaXF1ZU5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPHN0cmluZywgU2hhcmVFbnRpdHlSZXF1ZXN0Pj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLnBvc3QodGhpcy5jb25maWcuYXBpVXJsICsgQUNDT1VOVFNfQVBJLlNIQVJFLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOnJvbGVVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHJvbGVVbmlxdWVOYW1lKSksIG1vZGVsKVxuICAgICAgLm1hcCgocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8c3RyaW5nLCBTaGFyZUVudGl0eVJlcXVlc3Q+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IHJvbGVVbmlxdWVOYW1lLCBlbnRpdHk6IG1vZGVsLmVudGl0eSwgZW50aXR5VW5pcXVlTmFtZTogbW9kZWwuZW50aXR5VW5pcXVlTmFtZSB9O1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPHN0cmluZywgU2hhcmVFbnRpdHlSZXF1ZXN0PihlKSk7XG4gIH1cblxuICBwdWJsaWMgVW5TaGFyZShlbnRyeVVuaXF1ZU5hbWU6IHN0cmluZywgZW50aXR5OiBzdHJpbmcsIGVudGl0eVVuaXF1ZU5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPHN0cmluZywgU2hhcmVFbnRpdHlSZXF1ZXN0Pj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLmRlbGV0ZSh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUEkuQ0hBTkdFX1BFUk1JU1NJT04ucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6YXNzaWduUm9sZUVudHJ5VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudChlbnRyeVVuaXF1ZU5hbWUpKSlcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPHN0cmluZywgU2hhcmVFbnRpdHlSZXF1ZXN0PiA9IHJlcy5qc29uKCk7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGVudHJ5VW5pcXVlTmFtZSwgZW50aXR5VW5pcXVlTmFtZSwgZW50aXR5IH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8c3RyaW5nLCBTaGFyZUVudGl0eVJlcXVlc3Q+KGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBVcGRhdGVFbnRpdHlQZXJtaXNzaW9uKG1vZGVsOiBTaGFyZVJlcXVlc3RGb3JtLCBlbnRpdHk6IHN0cmluZywgbmV3Um9sZVVuaXF1ZU5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPHN0cmluZywgU2hhcmVFbnRpdHlSZXF1ZXN0Pj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuXG4gICAgcmV0dXJuIHRoaXMuX2h0dHAucHV0KHRoaXMuY29uZmlnLmFwaVVybCArIEFDQ09VTlRTX0FQSS5DSEFOR0VfUEVSTUlTU0lPTi5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzphc3NpZ25Sb2xlRW50cnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KG1vZGVsLnVuaXF1ZU5hbWUpKSwgbW9kZWwpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxzdHJpbmcsIFNoYXJlRW50aXR5UmVxdWVzdD4gPSByZXMuanNvbigpO1xuICAgICAgICBkYXRhLnF1ZXJ5U3RyaW5nID0geyBtb2RlbCwgbmV3Um9sZVVuaXF1ZU5hbWUsIGVudGl0eSB9O1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPHN0cmluZywgU2hhcmVFbnRpdHlSZXF1ZXN0PihlKSk7XG4gIH1cblxuICBwdWJsaWMgQWNjb3VudFVuc2hhcmUodXNlckVtYWlsOiBzdHJpbmcsIGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxzdHJpbmcsIHN0cmluZz4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcblxuICAgIHJldHVybiB0aGlzLl9odHRwLnB1dCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUEkuQ0hBTkdFX1BFUk1JU1NJT04ucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuY29tcGFueVVuaXF1ZU5hbWUpKS5yZXBsYWNlKCc6YWNjb3VudFVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQoYWNjb3VudFVuaXF1ZU5hbWUpKSwgeyB1c2VyOiB1c2VyRW1haWwgfSkubWFwKChyZXMpID0+IHtcbiAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8c3RyaW5nLCBzdHJpbmc+ID0gcmVzLmpzb24oKTtcbiAgICAgIGRhdGEucmVxdWVzdCA9IHVzZXJFbWFpbDtcbiAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lIH07XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8c3RyaW5nLCBzdHJpbmc+KGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBBY2NvdW50U2hhcmVXaXRoKGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxBY2NvdW50U2hhcmVkV2l0aFJlc3BvbnNlW10sIHN0cmluZz4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5jb25maWcuYXBpVXJsICsgQUNDT1VOVFNfQVBJLlNIQVJFRF9XSVRILnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSkpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxBY2NvdW50U2hhcmVkV2l0aFJlc3BvbnNlW10sIHN0cmluZz4gPSByZXMuanNvbigpO1xuICAgICAgICBkYXRhLnJlcXVlc3QgPSAnJztcbiAgICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgYWNjb3VudFVuaXF1ZU5hbWUgfTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxBY2NvdW50U2hhcmVkV2l0aFJlc3BvbnNlW10sIHN0cmluZz4oZSkpO1xuICB9XG5cbiAgcHVibGljIERlbGV0ZUFjY291bnQoYWNjb3VudFVuaXF1ZU5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPHN0cmluZywgc3RyaW5nPj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLmRlbGV0ZSh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUEkuREVMRVRFLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSkpLm1hcCgocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPHN0cmluZywgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnJlcXVlc3QgPSBhY2NvdW50VW5pcXVlTmFtZTtcbiAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IGFjY291bnRVbmlxdWVOYW1lIH07XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8c3RyaW5nLCBzdHJpbmc+KGUsIGFjY291bnRVbmlxdWVOYW1lLCB7IGFjY291bnRVbmlxdWVOYW1lIH0pKTtcbiAgfVxuXG4gIHB1YmxpYyBHZXRGbGF0dGVuQWNjb3VudHMocT86IHN0cmluZywgcGFnZT86IHN0cmluZywgY291bnQ/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxGbGF0dGVuQWNjb3VudHNSZXNwb25zZSwgc3RyaW5nPj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUEkuRkxBVFRFTl9BQ0NPVU5UUy5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzpxJywgZW5jb2RlVVJJQ29tcG9uZW50KHEgfHwgJycpKS5yZXBsYWNlKCc6Y291bnQnLCBjb3VudCB8fCAnJykucmVwbGFjZSgnOnBhZ2UnLCBlbmNvZGVVUklDb21wb25lbnQocGFnZSB8fCAnJykpKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxGbGF0dGVuQWNjb3VudHNSZXNwb25zZSwgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnJlcXVlc3QgPSAnJztcbiAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7IHEsIHBhZ2UsIGNvdW50IH07XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8RmxhdHRlbkFjY291bnRzUmVzcG9uc2UsIHN0cmluZz4oZSkpO1xuICB9XG5cbiAgcHVibGljIEdldEZsYXR0ZXJuQWNjb3VudHNPZkdyb3VwKGdyb3VwVW5pcXVlTmFtZXM6IHsgZ3JvdXBVbmlxdWVOYW1lczogc3RyaW5nW10gfSwgY291bnQ/OiBhbnksIHE/OiBzdHJpbmcsIHBhZ2U/OiBhbnkpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxGbGF0dGVuQWNjb3VudHNSZXNwb25zZSwgeyBncm91cFVuaXF1ZU5hbWVzOiBzdHJpbmdbXSB9Pj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLnBvc3QodGhpcy5jb25maWcuYXBpVXJsICsgQUNDT1VOVFNfQVBJLkZMQVRURU5fQUNDT1VOVFNfT0ZfR1JPVVBTLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmNvdW50JywgY291bnQgfHwgMCkucmVwbGFjZSgnOnEnLCBlbmNvZGVVUklDb21wb25lbnQocSB8fCAnJykpLnJlcGxhY2UoJzpwYWdlJywgZW5jb2RlVVJJQ29tcG9uZW50KHBhZ2UgfHwgMSkpLCBncm91cFVuaXF1ZU5hbWVzKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxGbGF0dGVuQWNjb3VudHNSZXNwb25zZSwgeyBncm91cFVuaXF1ZU5hbWVzOiBzdHJpbmdbXSB9PiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnJlcXVlc3QgPSBncm91cFVuaXF1ZU5hbWVzO1xuICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgY291bnQsIHEsIHBhZ2UgfTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxGbGF0dGVuQWNjb3VudHNSZXNwb25zZSwgeyBncm91cFVuaXF1ZU5hbWVzOiBzdHJpbmdbXSB9PihlKSk7XG4gIH1cblxuICBwdWJsaWMgR2V0VGF4SGllcmFyY2h5KGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxBY2NvdW50c1RheEhpZXJhcmNoeVJlc3BvbnNlLCBzdHJpbmc+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHRoaXMuY29uZmlnLmFwaVVybCArIEFDQ09VTlRTX0FQSS5UQVhfSElFUkFSQ0hZLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmFjY291bnRVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGFjY291bnRVbmlxdWVOYW1lKSkpLm1hcCgocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPEFjY291bnRzVGF4SGllcmFyY2h5UmVzcG9uc2UsIHN0cmluZz4gPSByZXMuanNvbigpO1xuICAgICAgZGF0YS5yZXF1ZXN0ID0gJyc7XG4gICAgICBkYXRhLnF1ZXJ5U3RyaW5nID0geyBhY2NvdW50VW5pcXVlTmFtZSB9O1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPEFjY291bnRzVGF4SGllcmFyY2h5UmVzcG9uc2UsIHN0cmluZz4oZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIGFjY291bnRzIHYyIGFwaSdzXG4gICAqL1xuICBwdWJsaWMgR2V0QWNjb3VudERldGFpbHNWMihhY2NvdW50VW5pcXVlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8QWNjb3VudFJlc3BvbnNlVjIsIHN0cmluZz4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5jb25maWcuYXBpVXJsICsgQUNDT1VOVFNfQVBJX1YyLkdFVC5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzphY2NvdW50VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudChhY2NvdW50VW5pcXVlTmFtZSkpKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxBY2NvdW50UmVzcG9uc2VWMiwgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnF1ZXJ5U3RyaW5nID0geyBhY2NvdW50VW5pcXVlTmFtZSB9O1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPEFjY291bnRSZXNwb25zZVYyLCBzdHJpbmc+KGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBDcmVhdGVBY2NvdW50VjIobW9kZWw6IEFjY291bnRSZXF1ZXN0VjIsIGdyb3VwVW5pcXVlTmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8QWNjb3VudFJlc3BvbnNlVjIsIEFjY291bnRSZXF1ZXN0VjI+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAucG9zdCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUElfVjIuQ1JFQVRFLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmdyb3VwVW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudChncm91cFVuaXF1ZU5hbWUpKSwgbW9kZWwpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxBY2NvdW50UmVzcG9uc2VWMiwgQWNjb3VudFJlcXVlc3RWMj4gPSByZXMuanNvbigpO1xuICAgICAgICBkYXRhLnJlcXVlc3QgPSBtb2RlbDtcbiAgICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHsgZ3JvdXBVbmlxdWVOYW1lIH07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8QWNjb3VudFJlc3BvbnNlVjIsIEFjY291bnRSZXF1ZXN0VjI+KGUsIG1vZGVsLCB7IGdyb3VwVW5pcXVlTmFtZSB9KSk7XG4gIH1cblxuICBwdWJsaWMgVXBkYXRlQWNjb3VudFYyKG1vZGVsOiBBY2NvdW50UmVxdWVzdFYyLCByZXFPYmo6IHsgZ3JvdXBVbmlxdWVOYW1lOiBzdHJpbmcsIGFjY291bnRVbmlxdWVOYW1lOiBzdHJpbmcgfSk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPEFjY291bnRSZXNwb25zZVYyLCBBY2NvdW50UmVxdWVzdFYyPj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLnB1dCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBBQ0NPVU5UU19BUElfVjIuVVBEQVRFLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSlcbiAgICAgIC5yZXBsYWNlKCc6Z3JvdXBVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KHJlcU9iai5ncm91cFVuaXF1ZU5hbWUpKVxuICAgICAgLnJlcGxhY2UoJzphY2NvdW50VW5pcXVlTmFtZScsIHJlcU9iai5hY2NvdW50VW5pcXVlTmFtZSksIG1vZGVsKVxuICAgICAgLm1hcCgocmVzKSA9PiB7XG4gICAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8QWNjb3VudFJlc3BvbnNlVjIsIEFjY291bnRSZXF1ZXN0VjI+ID0gcmVzLmpzb24oKTtcbiAgICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSByZXFPYmo7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8QWNjb3VudFJlc3BvbnNlVjIsIEFjY291bnRSZXF1ZXN0VjI+KGUpKTtcbiAgfVxufVxuIl19