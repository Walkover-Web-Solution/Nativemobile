"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
require("rxjs/add/operator/map");
var _ = require("lodash");
var router_1 = require("@angular/router");
var httpWrapper_service_1 = require("./httpWrapper.service");
var catchmanger_1 = require("./catchManager/catchmanger");
var group_api_1 = require("./apiurls/group.api");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
// import { UserManager, Log, MetadataService, User } from 'oidc-client';
var GroupService = (function () {
    function GroupService(errorHandler, _http, _router, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._router = _router;
        this._generalService = _generalService;
        this.config = config;
    }
    GroupService.prototype.flattenGroup = function (rawList, parents) {
        var _this = this;
        if (parents === void 0) { parents = []; }
        var listofUN;
        listofUN = _.map(rawList, function (listItem) {
            var newParents;
            var result;
            newParents = _.union([], parents);
            newParents.push({
                name: listItem.name,
                uniqueName: listItem.uniqueName
            });
            listItem = Object.assign({}, listItem, { parentGroups: [] });
            listItem.parentGroups = newParents;
            if (listItem.groups.length > 0) {
                result = _this.flattenGroup(listItem.groups, newParents);
                result.push(_.omit(listItem, 'groups'));
            }
            else {
                result = _.omit(listItem, 'groups');
            }
            return result;
        });
        return _.flatten(listofUN);
    };
    GroupService.prototype.CreateGroup = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + group_api_1.GROUP_API.CREATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)), model).map(function (res) {
            var data = res.json();
            data.request = model;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, model); });
    };
    GroupService.prototype.UpdateGroup = function (modele, groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + group_api_1.GROUP_API.UPDATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName)), modele).map(function (res) {
            var data = res.json();
            data.queryString = { groupUniqueName: groupUniqueName };
            data.request = modele;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, modele, { groupUniqueName: groupUniqueName }); });
    };
    GroupService.prototype.ShareGroup = function (modele, groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + group_api_1.GROUP_API.SHARE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName)), modele).map(function (res) {
            var data = res.json();
            data.queryString = { groupUniqueName: groupUniqueName };
            data.request = modele;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, modele, { groupUniqueName: groupUniqueName }); });
    };
    GroupService.prototype.GetGrouptDetails = function (groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + group_api_1.GROUP_API.GET_GROUP_DETAILS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName))).map(function (res) {
            var data = res.json();
            data.queryString = { groupUniqueName: groupUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    // need to check on Effect
    GroupService.prototype.UnShareGroup = function (userEmail, groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + group_api_1.GROUP_API.UNSHARE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName)), { user: userEmail }).map(function (res) {
            var data = res.json();
            data.request = userEmail;
            data.queryString = { groupUniqueName: groupUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, userEmail, { groupUniqueName: groupUniqueName }); });
    };
    GroupService.prototype.ShareWithGroup = function (groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + group_api_1.GROUP_API.SHARED_WITH.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName))).map(function (res) {
            var data = res.json();
            data.queryString = { groupUniqueName: groupUniqueName };
            data.request = groupUniqueName;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, groupUniqueName, { groupUniqueName: groupUniqueName }); });
    };
    GroupService.prototype.GetGroupsWithAccounts = function (q) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + group_api_1.GROUP_API.GROUPS_WITH_ACCOUNT.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':q', encodeURIComponent(q || ''))).map(function (res) {
            var data = res.json();
            data.request = q;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, q); });
    };
    GroupService.prototype.MoveGroup = function (modele, groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + group_api_1.GROUP_API.MOVE_GROUP.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName)), modele).map(function (res) {
            var data = res.json();
            data.request = modele;
            data.queryString = { groupUniqueName: groupUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, modele, { groupUniqueName: groupUniqueName }); });
    };
    GroupService.prototype.GetGroupDetails = function (groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + group_api_1.GROUP_API.GET_GROUP_DETAILS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName))).map(function (res) {
            var data = res.json();
            data.request = groupUniqueName;
            data.queryString = { groupUniqueName: groupUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, groupUniqueName, { groupUniqueName: groupUniqueName }); });
    };
    GroupService.prototype.DeleteGroup = function (groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.delete(this.config.apiUrl + group_api_1.GROUP_API.DELETE_GROUP.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName))).map(function (res) {
            var data = res.json();
            data.request = groupUniqueName;
            data.queryString = { groupUniqueName: groupUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, groupUniqueName, { groupUniqueName: groupUniqueName }); });
    };
    GroupService.prototype.GetFlattenGroupsAccounts = function (q, page, count, showEmptyGroups) {
        var _this = this;
        if (q === void 0) { q = ''; }
        if (page === void 0) { page = 1; }
        if (count === void 0) { count = 20000; }
        if (showEmptyGroups === void 0) { showEmptyGroups = 'false'; }
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + group_api_1.GROUP_API.FLATTEN_GROUP_WITH_ACCOUNTS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))
            .replace(':q', encodeURIComponent(q || ''))
            .replace(':page', encodeURIComponent(page.toString()))
            .replace(':count', encodeURIComponent(count.toString()))
            .replace(':showEmptyGroups', encodeURIComponent(showEmptyGroups))).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = { q: q, page: page, count: count, showEmptyGroups: showEmptyGroups };
            // data.response.results.forEach(p => p.isOpen = false);
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, '', { q: q, page: page, count: count, showEmptyGroups: showEmptyGroups }); });
    };
    GroupService.prototype.GetTaxHierarchy = function (groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + group_api_1.GROUP_API.TAX_HIERARCHY.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName))).map(function (res) {
            var data = res.json();
            data.request = groupUniqueName;
            data.queryString = { groupUniqueName: groupUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, groupUniqueName, { groupUniqueName: groupUniqueName }); });
    };
    /**
     * get subgroups of a group
     * @param groupUniqueName
     */
    GroupService.prototype.GetGroupSubgroups = function (groupUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + group_api_1.GROUP_API.GET_SUB_GROUPS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':groupUniqueName', encodeURIComponent(groupUniqueName))).map(function (res) {
            var data = res.json();
            data.request = groupUniqueName;
            data.queryString = { groupUniqueName: groupUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, groupUniqueName, { groupUniqueName: groupUniqueName }); });
    };
    return GroupService;
}());
GroupService = __decorate([
    core_1.Injectable(),
    __param(4, core_1.Optional()), __param(4, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService,
        router_1.Router,
        general_service_1.GeneralService, Object])
], GroupService);
exports.GroupService = GroupService;
//# sourceMappingURL=data:application/json;base64,