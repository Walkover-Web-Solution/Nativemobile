"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
require("rxjs/add/operator/map");
var router_1 = require("@angular/router");
var httpWrapper_service_1 = require("./httpWrapper.service");
var catchmanger_1 = require("./catchManager/catchmanger");
var dashboard_api_1 = require("./apiurls/dashboard.api");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var DashboardService = (function () {
    function DashboardService(errorHandler, _http, _router, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._router = _router;
        this._generalService = _generalService;
        this.config = config;
    }
    DashboardService.prototype.Dashboard = function (fromDate, toDate, interval, refresh) {
        var _this = this;
        if (fromDate === void 0) { fromDate = ''; }
        if (toDate === void 0) { toDate = ''; }
        if (interval === void 0) { interval = 'monthly'; }
        if (refresh === void 0) { refresh = false; }
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + dashboard_api_1.DASHBOARD_API.DASHBOARD.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':from', encodeURIComponent(fromDate)).replace(':to', encodeURIComponent(toDate)).replace(':interval', interval).replace(':refresh', refresh.toString())).map(function (res) {
            var data = res.json();
            data.queryString = { fromDate: fromDate, toDate: toDate, interval: interval, refresh: refresh };
            data.request = '';
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, '', { fromDate: fromDate, toDate: toDate, interval: interval, refresh: refresh }); });
    };
    DashboardService.prototype.GetGroupHistory = function (model, fromDate, toDate, interval, refresh) {
        var _this = this;
        if (fromDate === void 0) { fromDate = ''; }
        if (toDate === void 0) { toDate = ''; }
        if (interval === void 0) { interval = 'monthly'; }
        if (refresh === void 0) { refresh = false; }
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + dashboard_api_1.DASHBOARD_API.GROUP_HISTORY.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':from', encodeURIComponent(fromDate)).replace(':to', encodeURIComponent(toDate)).replace(':interval', interval).replace(':refresh', refresh.toString()), model).map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { fromDate: fromDate, toDate: toDate, interval: interval, refresh: refresh };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, model, {
            fromDate: fromDate,
            toDate: toDate,
            interval: interval,
            refresh: refresh
        }); });
    };
    DashboardService.prototype.GetClosingBalance = function (groupUniqueName, fromDate, toDate, refresh) {
        var _this = this;
        if (groupUniqueName === void 0) { groupUniqueName = ''; }
        if (fromDate === void 0) { fromDate = ''; }
        if (toDate === void 0) { toDate = ''; }
        if (refresh === void 0) { refresh = false; }
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + dashboard_api_1.DASHBOARD_API.CLOSING_BALANCE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':fromDate', fromDate).replace(':toDate', toDate).replace(':groupUniqueName', encodeURIComponent(groupUniqueName)).replace(':refresh', refresh.toString())).map(function (res) {
            var data = res.json();
            data.queryString = { fromDate: fromDate, toDate: toDate, groupUniqueName: groupUniqueName, refresh: refresh };
            data.request = '';
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, '', { fromDate: fromDate, toDate: toDate, groupUniqueName: groupUniqueName, refresh: refresh }); });
    };
    DashboardService.prototype.GetBankAccounts = function () {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + dashboard_api_1.DASHBOARD_API.BANK_ACCOUNTS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))).map(function (res) {
            var data = res.json();
            data.request = '';
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    DashboardService.prototype.RefreshBankAccount = function (loginId) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + dashboard_api_1.DASHBOARD_API.REFRESH_BANK_ACCOUNT.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':loginId', loginId)).map(function (res) {
            var data = res.json();
            data.request = '';
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    DashboardService.prototype.ReconnectBankAccount = function (loginId) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + dashboard_api_1.DASHBOARD_API.RECONNECT_BANK_ACCOUNT.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':loginId', loginId)).map(function (res) {
            var data = res.json();
            data.request = '';
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    return DashboardService;
}());
DashboardService = __decorate([
    core_1.Injectable(),
    __param(4, core_1.Optional()), __param(4, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService, router_1.Router,
        general_service_1.GeneralService, Object])
], DashboardService);
exports.DashboardService = DashboardService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzaGJvYXJkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkYXNoYm9hcmQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUE2RDtBQUM3RCxpQ0FBK0I7QUFFL0IsMENBQXlDO0FBQ3pDLDZEQUEyRDtBQUczRCwwREFBMEQ7QUFDMUQseURBQXdEO0FBRXhELHFEQUFtRDtBQUNuRCxtREFBcUU7QUFHckUsSUFBYSxnQkFBZ0I7SUFJM0IsMEJBQW9CLFlBQTBCLEVBQVMsS0FBeUIsRUFBUyxPQUFlLEVBQ3BGLGVBQStCLEVBQTZDLE1BQTBCO1FBRHRHLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVMsVUFBSyxHQUFMLEtBQUssQ0FBb0I7UUFBUyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ3BGLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQUE2QyxXQUFNLEdBQU4sTUFBTSxDQUFvQjtJQUMxSCxDQUFDO0lBRU0sb0NBQVMsR0FBaEIsVUFBaUIsUUFBcUIsRUFBRSxNQUFtQixFQUFFLFFBQTRCLEVBQUUsT0FBd0I7UUFBbkgsaUJBU0M7UUFUZ0IseUJBQUEsRUFBQSxhQUFxQjtRQUFFLHVCQUFBLEVBQUEsV0FBbUI7UUFBRSx5QkFBQSxFQUFBLG9CQUE0QjtRQUFFLHdCQUFBLEVBQUEsZUFBd0I7UUFDakgsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQztRQUNoRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsNkJBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFD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LFlBQVksQ0FBQyxXQUFXLENBQXFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBeEUsQ0FBd0UsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUEzRUQsSUEyRUM7QUEzRVksZ0JBQWdCO0lBRDVCLGlCQUFVLEVBQUU7SUFNMkMsV0FBQSxlQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsYUFBTSxDQUFDLDhCQUFhLENBQUMsQ0FBQTtxQ0FEckQsMEJBQVksRUFBZ0Isd0NBQWtCLEVBQWtCLGVBQU07UUFDbkUsZ0NBQWM7R0FMeEMsZ0JBQWdCLENBMkU1QjtBQTNFWSw0Q0FBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBIdHRwV3JhcHBlclNlcnZpY2UgfSBmcm9tICcuL2h0dHBXcmFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL2FwaS1tb2RlbHMvQmFzZVJlc3BvbnNlJztcbmltcG9ydCB7IFVzZXJEZXRhaWxzIH0gZnJvbSAnLi4vbW9kZWxzL2FwaS1tb2RlbHMvbG9naW5Nb2RlbHMnO1xuaW1wb3J0IHsgRXJyb3JIYW5kbGVyIH0gZnJvbSAnLi9jYXRjaE1hbmFnZXIvY2F0Y2htYW5nZXInO1xuaW1wb3J0IHsgREFTSEJPQVJEX0FQSSB9IGZyb20gJy4vYXBpdXJscy9kYXNoYm9hcmQuYXBpJztcbmltcG9ydCB7IEJhbmtBY2NvdW50c1Jlc3BvbnNlLCBDbG9zaW5nQmFsYW5jZVJlc3BvbnNlLCBEYXNoYm9hcmRSZXNwb25zZSwgR3JvdXBIaXN0b3J5UmVxdWVzdCwgR3JvdXBIaXN0b3J5UmVzcG9uc2UsIFJlZnJlc2hCYW5rQWNjb3VudFJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL2FwaS1tb2RlbHMvRGFzaGJvYXJkJztcbmltcG9ydCB7IEdlbmVyYWxTZXJ2aWNlIH0gZnJvbSAnLi9nZW5lcmFsLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VydmljZUNvbmZpZywgSVNlcnZpY2VDb25maWdBcmdzIH0gZnJvbSAnLi9zZXJ2aWNlLmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEYXNoYm9hcmRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjb21wYW55VW5pcXVlTmFtZTogc3RyaW5nO1xuICBwcml2YXRlIHVzZXI6IFVzZXJEZXRhaWxzO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXIsIHB1YmxpYyBfaHR0cDogSHR0cFdyYXBwZXJTZXJ2aWNlLCBwdWJsaWMgX3JvdXRlcjogUm91dGVyLFxuICAgICAgICAgICAgICBwcml2YXRlIF9nZW5lcmFsU2VydmljZTogR2VuZXJhbFNlcnZpY2UsIEBPcHRpb25hbCgpIEBJbmplY3QoU2VydmljZUNvbmZpZykgcHJpdmF0ZSBjb25maWc6IElTZXJ2aWNlQ29uZmlnQXJncykge1xuICB9XG5cbiAgcHVibGljIERhc2hib2FyZChmcm9tRGF0ZTogc3RyaW5nID0gJycsIHRvRGF0ZTogc3RyaW5nID0gJycsIGludGVydmFsOiBzdHJpbmcgPSAnbW9udGhseScsIHJlZnJlc2g6IGJvb2xlYW4gPSBmYWxzZSk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPERhc2hib2FyZFJlc3BvbnNlLCBzdHJpbmc+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHRoaXMuY29uZmlnLmFwaVVybCArIERBU0hCT0FSRF9BUEkuREFTSEJPQVJELnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmZyb20nLCBlbmNvZGVVUklDb21wb25lbnQoZnJvbURhdGUpKS5yZXBsYWNlKCc6dG8nLCBlbmNvZGVVUklDb21wb25lbnQodG9EYXRlKSkucmVwbGFjZSgnOmludGVydmFsJywgaW50ZXJ2YWwpLnJlcGxhY2UoJzpyZWZyZXNoJywgcmVmcmVzaC50b1N0cmluZygpKSkubWFwKChyZXMpID0+IHtcbiAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8RGFzaGJvYXJkUmVzcG9uc2UsIHN0cmluZz4gPSByZXMuanNvbigpO1xuICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IHtmcm9tRGF0ZSwgdG9EYXRlLCBpbnRlcnZhbCwgcmVmcmVzaH07XG4gICAgICBkYXRhLnJlcXVlc3QgPSAnJztcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxEYXNoYm9hcmRSZXNwb25zZSwgc3RyaW5nPihlLCAnJywge2Zyb21EYXRlLCB0b0RhdGUsIGludGVydmFsLCByZWZyZXNofSkpO1xuICB9XG5cbiAgcHVibGljIEdldEdyb3VwSGlzdG9yeShtb2RlbDogR3JvdXBIaXN0b3J5UmVxdWVzdCwgZnJvbURhdGU6IHN0cmluZyA9ICcnLCB0b0RhdGU6IHN0cmluZyA9ICcnLCBpbnRlcnZhbDogc3RyaW5nID0gJ21vbnRobHknLCByZWZyZXNoOiBib29sZWFuID0gZmFsc2UpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxHcm91cEhpc3RvcnlSZXNwb25zZSwgR3JvdXBIaXN0b3J5UmVxdWVzdD4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuY29uZmlnLmFwaVVybCArIERBU0hCT0FSRF9BUEkuR1JPVVBfSElTVE9SWS5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzpmcm9tJywgZW5jb2RlVVJJQ29tcG9uZW50KGZyb21EYXRlKSkucmVwbGFjZSgnOnRvJywgZW5jb2RlVVJJQ29tcG9uZW50KHRvRGF0ZSkpLnJlcGxhY2UoJzppbnRlcnZhbCcsIGludGVydmFsKS5yZXBsYWNlKCc6cmVmcmVzaCcsIHJlZnJlc2gudG9TdHJpbmcoKSksIG1vZGVsKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxHcm91cEhpc3RvcnlSZXNwb25zZSwgR3JvdXBIaXN0b3J5UmVxdWVzdD4gPSByZXMuanNvbigpO1xuICAgICAgZGF0YS5yZXF1ZXN0ID0gbW9kZWw7XG4gICAgICBkYXRhLnF1ZXJ5U3RyaW5nID0ge2Zyb21EYXRlLCB0b0RhdGUsIGludGVydmFsLCByZWZyZXNofTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxHcm91cEhpc3RvcnlSZXNwb25zZSwgR3JvdXBIaXN0b3J5UmVxdWVzdD4oZSwgbW9kZWwsIHtcbiAgICAgIGZyb21EYXRlLFxuICAgICAgdG9EYXRlLFxuICAgICAgaW50ZXJ2YWwsXG4gICAgICByZWZyZXNoXG4gICAgfSkpO1xuICB9XG5cbiAgcHVibGljIEdldENsb3NpbmdCYWxhbmNlKGdyb3VwVW5pcXVlTmFtZTogc3RyaW5nID0gJycsIGZyb21EYXRlOiBzdHJpbmcgPSAnJywgdG9EYXRlOiBzdHJpbmcgPSAnJywgcmVmcmVzaDogYm9vbGVhbiA9IGZhbHNlKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8Q2xvc2luZ0JhbGFuY2VSZXNwb25zZSwgc3RyaW5nPj4ge1xuICAgIHRoaXMudXNlciA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLnVzZXI7XG4gICAgdGhpcy5jb21wYW55VW5pcXVlTmFtZSA9IHRoaXMuX2dlbmVyYWxTZXJ2aWNlLmNvbXBhbnlVbmlxdWVOYW1lO1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBEQVNIQk9BUkRfQVBJLkNMT1NJTkdfQkFMQU5DRS5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzpmcm9tRGF0ZScsIGZyb21EYXRlKS5yZXBsYWNlKCc6dG9EYXRlJywgdG9EYXRlKS5yZXBsYWNlKCc6Z3JvdXBVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGdyb3VwVW5pcXVlTmFtZSkpLnJlcGxhY2UoJzpyZWZyZXNoJywgcmVmcmVzaC50b1N0cmluZygpKSkubWFwKChyZXMpID0+IHtcbiAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8Q2xvc2luZ0JhbGFuY2VSZXNwb25zZSwgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICBkYXRhLnF1ZXJ5U3RyaW5nID0ge2Zyb21EYXRlLCB0b0RhdGUsIGdyb3VwVW5pcXVlTmFtZSwgcmVmcmVzaH07XG4gICAgICBkYXRhLnJlcXVlc3QgPSAnJztcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxDbG9zaW5nQmFsYW5jZVJlc3BvbnNlLCBzdHJpbmc+KGUsICcnLCB7ZnJvbURhdGUsIHRvRGF0ZSwgZ3JvdXBVbmlxdWVOYW1lLCByZWZyZXNofSkpO1xuICB9XG5cbiAgcHVibGljIEdldEJhbmtBY2NvdW50cygpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxCYW5rQWNjb3VudHNSZXNwb25zZVtdLCBzdHJpbmc+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHRoaXMuY29uZmlnLmFwaVVybCArIERBU0hCT0FSRF9BUEkuQkFOS19BQ0NPVU5UUy5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxCYW5rQWNjb3VudHNSZXNwb25zZVtdLCBzdHJpbmc+ID0gcmVzLmpzb24oKTtcbiAgICAgIGRhdGEucmVxdWVzdCA9ICcnO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPEJhbmtBY2NvdW50c1Jlc3BvbnNlW10sIHN0cmluZz4oZSwgJycpKTtcbiAgfVxuXG4gIHB1YmxpYyBSZWZyZXNoQmFua0FjY291bnQobG9naW5JZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8UmVmcmVzaEJhbmtBY2NvdW50UmVzcG9uc2UsIHN0cmluZz4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5jb25maWcuYXBpVXJsICsgREFTSEJPQVJEX0FQSS5SRUZSRVNIX0JBTktfQUNDT1VOVC5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpLnJlcGxhY2UoJzpsb2dpbklkJywgbG9naW5JZCkpLm1hcCgocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPFJlZnJlc2hCYW5rQWNjb3VudFJlc3BvbnNlLCBzdHJpbmc+ID0gcmVzLmpzb24oKTtcbiAgICAgIGRhdGEucmVxdWVzdCA9ICcnO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPFJlZnJlc2hCYW5rQWNjb3VudFJlc3BvbnNlLCBzdHJpbmc+KGUsICcnKSk7XG4gIH1cblxuICBwdWJsaWMgUmVjb25uZWN0QmFua0FjY291bnQobG9naW5JZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8UmVmcmVzaEJhbmtBY2NvdW50UmVzcG9uc2UsIHN0cmluZz4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodGhpcy5jb25maWcuYXBpVXJsICsgREFTSEJPQVJEX0FQSS5SRUNPTk5FQ1RfQkFOS19BQ0NPVU5ULnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkucmVwbGFjZSgnOmxvZ2luSWQnLCBsb2dpbklkKSkubWFwKChyZXMpID0+IHtcbiAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8UmVmcmVzaEJhbmtBY2NvdW50UmVzcG9uc2UsIHN0cmluZz4gPSByZXMuanNvbigpO1xuICAgICAgZGF0YS5yZXF1ZXN0ID0gJyc7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8UmVmcmVzaEJhbmtBY2NvdW50UmVzcG9uc2UsIHN0cmluZz4oZSwgJycpKTtcbiAgfVxufVxuIl19