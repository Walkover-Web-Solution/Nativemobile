"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpWrapper_service_1 = require("./httpWrapper.service");
var core_1 = require("@angular/core");
var catchmanger_1 = require("./catchManager/catchmanger");
var purchase_invoice_api_1 = require("./apiurls/purchase-invoice.api");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var IInvoicePurchaseItem = (function () {
    function IInvoicePurchaseItem() {
    }
    return IInvoicePurchaseItem;
}());
exports.IInvoicePurchaseItem = IInvoicePurchaseItem;
var IInvoicePurchaseResponse = (function () {
    function IInvoicePurchaseResponse() {
    }
    return IInvoicePurchaseResponse;
}());
exports.IInvoicePurchaseResponse = IInvoicePurchaseResponse;
var ITaxResponse = (function () {
    function ITaxResponse() {
    }
    return ITaxResponse;
}());
exports.ITaxResponse = ITaxResponse;
/**** TAX MODEL ****/
/**** GENERATE PURCHASE INVOICE REQUEST ****/
var GeneratePurchaseInvoiceRequest = (function () {
    function GeneratePurchaseInvoiceRequest() {
    }
    return GeneratePurchaseInvoiceRequest;
}());
exports.GeneratePurchaseInvoiceRequest = GeneratePurchaseInvoiceRequest;
/**** GENERATE PURCHASE INVOICE REQUEST ****/
// export interface IInvoicePurchaseResponse {
//   accountName: string;
//   igstAmount: number;
//   cgstAmount: number;
//   sgstAmount: number;
//   taxableValue: number;
//   voucherNo: number;
//   gstin: string;
//   entryDate: string;
//   entryType: string;
//   particulars: string;
//   invoiceNo: string;
//   utgstAmount: number;
// }
var PurchaseInvoiceService = (function () {
    function PurchaseInvoiceService(errorHandler, _http, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._generalService = _generalService;
        this.config = config;
    }
    /*
    * Get Purchase Invoice
    * API: 'company/:companyUniqueName/invoices/purchase'
    * Method: GET
    */
    PurchaseInvoiceService.prototype.GetPurchaseInvoice = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var req = model;
        return this._http.get(this.config.apiUrl + purchase_invoice_api_1.PURCHASE_INVOICE_API.INVOICE_API.replace(':companyUniqueName', this.companyUniqueName), req).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /*
    * Get Taxes
    * API: 'company/:companyUniqueName/tax'
    * Method: GET
    */
    PurchaseInvoiceService.prototype.GetTaxesForThisCompany = function () {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + purchase_invoice_api_1.PURCHASE_INVOICE_API.GET_TAXES.replace(':companyUniqueName', this.companyUniqueName)).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /*
    * Update Purchase Invoice
    * API: '/company/:companyUniqueName/accounts/:accountUniqueName/invoices/generate-purchase'
    * Method: PUT
    */
    PurchaseInvoiceService.prototype.GeneratePurchaseInvoice = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var dataToSend = {
            uniqueNames: [model.entryUniqueName],
            taxes: model.taxes
        };
        return this._http.post(this.config.apiUrl + purchase_invoice_api_1.PURCHASE_INVOICE_API.GENERATE_PURCHASE_INVOICE.replace(':companyUniqueName', this.companyUniqueName).replace(':accountUniqueName', model.account.uniqueName), dataToSend).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /*
    * Download GSTR1 Sheet
    * API: 'gstreturn/GSTR_excel_export?monthYear=:month&gstin=:company_gstin'
    * Method: GET
    */
    PurchaseInvoiceService.prototype.DownloadGSTR1Sheet = function (reqObj) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + purchase_invoice_api_1.PURCHASE_INVOICE_API.DOWNLOAD_GSTR1_SHEET.replace(':companyUniqueName', this.companyUniqueName).replace(':month', reqObj.month).replace(':report_sheet_Type', reqObj.type).replace(':company_gstin', reqObj.gstNumber)).map(function (res) {
            var data = res.json();
            data.queryString = { reqObj: reqObj };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /*
    * Download GSTR1 Error Sheet
    * API: 'gstreturn/GSTR1_error_sheet?monthYear=:month&gstin=:company_gstin'
    * Method: GET
    */
    PurchaseInvoiceService.prototype.DownloadGSTR1ErrorSheet = function (reqObj) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + purchase_invoice_api_1.PURCHASE_INVOICE_API.DOWNLOAD_GSTR1_ERROR_SHEET.replace(':companyUniqueName', this.companyUniqueName).replace(':error_sheet_Type', reqObj.type).replace(':month', reqObj.month).replace(':company_gstin', reqObj.gstNumber)).map(function (res) {
            var data = res.json();
            data.queryString = { reqObj: reqObj };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    PurchaseInvoiceService.prototype.UpdatePurchaseInvoice = function (entryUniqueName, taxUniqueName, accountUniqueName) {
        var _this = this;
        console.log('ENTRY', entryUniqueName);
        console.log('TAX', taxUniqueName);
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var req = {
            uniqueNames: entryUniqueName,
            taxes: taxUniqueName
        };
        return this._http.put(this.config.apiUrl + purchase_invoice_api_1.PURCHASE_INVOICE_API.INVOICE_API.replace(':companyUniqueName', this.companyUniqueName).replace(':accountUniqueName', accountUniqueName), req).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    PurchaseInvoiceService.prototype.UpdatePurchaseEntry = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var accountUniqueName = model.accountUniqueName;
        var ledgerUniqname = model.ledgerUniqname;
        var req = {
            invoiceNumberAgainstVoucher: model.voucherNo,
            sendToGstr2: model.sendToGstr2,
            availItc: model.availItc
        };
        return this._http.patch(this.config.apiUrl + purchase_invoice_api_1.PURCHASE_INVOICE_API.UPDATE_PURCHASE_ENTRY.replace(':companyUniqueName', this.companyUniqueName).replace(':accountUniqueName', accountUniqueName).replace(':ledgerUniqueName', ledgerUniqname), req).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    PurchaseInvoiceService.prototype.UpdateInvoice = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        var accountUniqueName = model.accountUniqueName;
        var ledgerUniqname = model.ledgerUniqname;
        var req = {
            availItc: model.availItc,
            sendToGstr2: model.sendToGstr2
        };
        return this._http.patch(this.config.apiUrl + purchase_invoice_api_1.PURCHASE_INVOICE_API.UPDATE_INVOICE.replace(':companyUniqueName', this.companyUniqueName).replace(':accountUniqueName', accountUniqueName).replace(':ledgerUniqueName', ledgerUniqname), req).map(function (res) {
            var data = res.json();
            data.queryString = {};
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    return PurchaseInvoiceService;
}());
PurchaseInvoiceService = __decorate([
    core_1.Injectable(),
    __param(3, core_1.Optional()), __param(3, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService,
        general_service_1.GeneralService, Object])
], PurchaseInvoiceService);
exports.PurchaseInvoiceService = PurchaseInvoiceService;
//# sourceMappingURL=data:application/json;base64,