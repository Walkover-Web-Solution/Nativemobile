"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpWrapper_service_1 = require("./httpWrapper.service");
var core_1 = require("@angular/core");
var comapny_api_1 = require("./apiurls/comapny.api");
var catchmanger_1 = require("./catchManager/catchmanger");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var CompanyService = (function () {
    function CompanyService(errorHandler, _http, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._generalService = _generalService;
        this.config = config;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
    }
    /**
     * CreateCompany
     */
    CompanyService.prototype.CreateCompany = function (company) {
        var _this = this;
        return this._http.post(this.config.apiUrl + comapny_api_1.COMPANY_API.CREATE_COMPANY, company)
            .map(function (res) {
            var data = res.json();
            data.request = company;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, company); });
    };
    /**
     * CompanyList
     */
    CompanyService.prototype.CompanyList = function () {
        var _this = this;
        this.user = this._generalService.user;
        return this._http.get(this.config.apiUrl + comapny_api_1.COMPANY_API.COMPANY_LIST.replace(':uniqueName', this.user.uniqueName))
            .map(function (res) {
            var data = res.json();
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    /**
     * DeleteCompany
     */
    CompanyService.prototype.DeleteCompany = function (uniqueName) {
        var _this = this;
        return this._http.delete(this.config.apiUrl + comapny_api_1.COMPANY_API.DELETE_COMPANY.replace(':uniqueName', uniqueName))
            .map(function (res) {
            var data = res.json();
            data.queryString = { uniqueName: uniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    /**
     * get state details
     */
    CompanyService.prototype.getStateDetails = function (cmpUniqueName) {
        var _this = this;
        var url = '';
        if (cmpUniqueName) {
            url = this.config.apiUrl + comapny_api_1.COMPANY_API.GET_STATE_DETAILS.replace(':companyUniqueName', encodeURIComponent(cmpUniqueName ? cmpUniqueName : ''));
        }
        else {
            url = this.config.apiUrl + comapny_api_1.COMPANY_API.GET_STATE_DETAILS.replace('?companyUniqueName=:companyUniqueName', '');
        }
        return this._http.get(url).map(function (res) {
            var data = res.json();
            data.queryString = cmpUniqueName;
            data.request = cmpUniqueName;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, cmpUniqueName, cmpUniqueName); });
    };
    CompanyService.prototype.getStateDetailsAuthGuard = function (cmpUniqueName) {
        var url = '';
        if (cmpUniqueName) {
            url = this.config.apiUrl + comapny_api_1.COMPANY_API.GET_STATE_DETAILS.replace(':companyUniqueName', encodeURIComponent(cmpUniqueName ? cmpUniqueName : ''));
        }
        else {
            url = this.config.apiUrl + comapny_api_1.COMPANY_API.GET_STATE_DETAILS.replace('?companyUniqueName=:companyUniqueName', '');
        }
        return this._http.get(url).map(function (res) {
            var data = res.json();
            return data;
        });
    };
    // Effects need to be review
    CompanyService.prototype.setStateDetails = function (stateDetails) {
        var _this = this;
        return this._http.post(this.config.apiUrl + comapny_api_1.COMPANY_API.SET_STATE_DETAILS, stateDetails).map(function (res) {
            var data = res.json();
            data.request = stateDetails;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, stateDetails); });
    };
    CompanyService.prototype.getComapnyTaxes = function () {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + comapny_api_1.COMPANY_API.TAX.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    CompanyService.prototype.getComapnyUsers = function () {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + comapny_api_1.COMPANY_API.GET_COMPANY_USERS.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    CompanyService.prototype.sendEmail = function (request) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + comapny_api_1.COMPANY_API.SEND_EMAIL
            .replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))
            .replace(':from', encodeURIComponent(request.params.from))
            .replace(':to', encodeURIComponent(request.params.to)), request.data).map(function (res) {
            return res.json();
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    CompanyService.prototype.sendSms = function (request) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + comapny_api_1.COMPANY_API.SEND_SMS
            .replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName))
            .replace(':from', encodeURIComponent(request.params.from))
            .replace(':to', encodeURIComponent(request.params.to)), request.data).map(function (res) {
            return res.json();
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /**
     * get all states
     */
    CompanyService.prototype.getAllStates = function () {
        var _this = this;
        return this._http.get(this.config.apiUrl + comapny_api_1.COMPANY_API.GET_ALL_STATES).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    /**
     * get coupon details
     * @param {string} couponCode
     * @returns {Observable<BaseResponse<GetCouponResp, string>>}
     * @memberof CompanyService
     */
    CompanyService.prototype.getCoupon = function (couponCode) {
        var _this = this;
        return this._http.get(this.config.apiUrl + comapny_api_1.COMPANY_API.GET_COUPON
            .replace(':code', encodeURIComponent(couponCode))).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    return CompanyService;
}());
CompanyService = __decorate([
    core_1.Injectable(),
    __param(3, core_1.Optional()), __param(3, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService, general_service_1.GeneralService, Object])
], CompanyService);
exports.CompanyService = CompanyService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFueVNlcnZpY2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbXBhbnlTZXJ2aWNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSw2REFBMkQ7QUFDM0Qsc0NBQTZEO0FBRzdELHFEQUFvRDtBQUNwRCwwREFBMEQ7QUFFMUQscURBQW1EO0FBQ25ELG1EQUFxRTtBQUdyRSxJQUFhLGNBQWM7SUFLekIsd0JBQW9CLFlBQTBCLEVBQVUsS0FBeUIsRUFBVSxlQUErQixFQUM3RSxNQUEwQjtRQURuRCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUFVLFVBQUssR0FBTCxLQUFLLENBQW9CO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBQzdFLFdBQU0sR0FBTixNQUFNLENBQW9CO1FBQ3JFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7UUFDdEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsaUJBQWlCLENBQUM7SUFDbEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksc0NBQWEsR0FBcEIsVUFBcUIsT0FBdUI7UUFBNUMsaUJBUUM7UUFQQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcseUJBQVcsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDO2FBQzdFLEdBQUcsQ0FBQyxVQUFDLEdBQUc7WUFDUCxJQUFJLElBQUksR0FBa0QsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3JFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBa0MsQ0FBQyxFQUFFLE9BQU8sQ0FB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QUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBbUIsQ0FBQyxDQUFDLEVBQWxELENBQWtELENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxrQ0FBUyxHQUFoQixVQUFpQixVQUFrQjtRQUFuQyxpQkFNQztRQUxDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyx5QkFBVyxDQUFDLFVBQVU7YUFDOUQsT0FBTyxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsR0FBRztZQUMzRCxJQUFJLElBQUksR0FBd0MsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzNELE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBd0IsQ0FBQyxDQUFDLEVBQXZELENBQXVELENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBMUpELElBMEpDO0FBMUpZLGNBQWM7SUFEMUIsaUJBQVUsRUFBRTtJQU9SLFdBQUEsZUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLGFBQU0sQ0FBQyw4QkFBYSxDQUFDLENBQUE7cUNBREYsMEJBQVksRUFBaUIsd0NBQWtCLEVBQTJCLGdDQUFjO0dBTC9HLGNBQWMsQ0EwSjFCO0FBMUpZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWNjb3VudFNoYXJlZFdpdGhSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9hcGktbW9kZWxzL0FjY291bnQnO1xuaW1wb3J0IHsgQ29tcGFueVJlcXVlc3QsIENvbXBhbnlSZXNwb25zZSwgR2V0Q291cG9uUmVzcCwgU3RhdGVEZXRhaWxzUmVxdWVzdCwgU3RhdGVEZXRhaWxzUmVzcG9uc2UsIFN0YXRlcywgVGF4UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvYXBpLW1vZGVscy9Db21wYW55JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgSHR0cFdyYXBwZXJTZXJ2aWNlIH0gZnJvbSAnLi9odHRwV3JhcHBlci5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVzZXJEZXRhaWxzIH0gZnJvbSAnLi4vbW9kZWxzL2FwaS1tb2RlbHMvbG9naW5Nb2RlbHMnO1xuaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL2FwaS1tb2RlbHMvQmFzZVJlc3BvbnNlJztcbmltcG9ydCB7IENPTVBBTllfQVBJIH0gZnJvbSAnLi9hcGl1cmxzL2NvbWFwbnkuYXBpJztcbmltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gJy4vY2F0Y2hNYW5hZ2VyL2NhdGNobWFuZ2VyJztcbmltcG9ydCB7IEJ1bGtFbWFpbFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvYXBpLW1vZGVscy9TZWFyY2gnO1xuaW1wb3J0IHsgR2VuZXJhbFNlcnZpY2UgfSBmcm9tICcuL2dlbmVyYWwuc2VydmljZSc7XG5pbXBvcnQgeyBTZXJ2aWNlQ29uZmlnLCBJU2VydmljZUNvbmZpZ0FyZ3MgfSBmcm9tICcuL3NlcnZpY2UuY29uZmlnJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbXBhbnlTZXJ2aWNlIHtcblxuICBwcml2YXRlIHVzZXI6IFVzZXJEZXRhaWxzO1xuICBwcml2YXRlIGNvbXBhbnlVbmlxdWVOYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlciwgcHJpdmF0ZSBfaHR0cDogSHR0cFdyYXBwZXJTZXJ2aWNlLCBwcml2YXRlIF9nZW5lcmFsU2VydmljZTogR2VuZXJhbFNlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChTZXJ2aWNlQ29uZmlnKSBwcml2YXRlIGNvbmZpZzogSVNlcnZpY2VDb25maWdBcmdzKSB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlQ29tcGFueVxuICAgKi9cbiAgcHVibGljIENyZWF0ZUNvbXBhbnkoY29tcGFueTogQ29tcGFueVJlcXVlc3QpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxDb21wYW55UmVzcG9uc2UsIENvbXBhbnlSZXF1ZXN0Pj4ge1xuICAgIHJldHVybiB0aGlzLl9odHRwLnBvc3QodGhpcy5jb25maWcuYXBpVXJsICsgQ09NUEFOWV9BUEkuQ1JFQVRFX0NPTVBBTlksIGNvbXBhbnkpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxDb21wYW55UmVzcG9uc2UsIENvbXBhbnlSZXF1ZXN0PiA9IHJlcy5qc29uKCk7XG4gICAgICAgIGRhdGEucmVxdWVzdCA9IGNvbXBhbnk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8Q29tcGFueVJlc3BvbnNlLCBDb21wYW55UmVxdWVzdD4oZSwgY29tcGFueSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBhbnlMaXN0XG4gICAqL1xuICBwdWJsaWMgQ29tcGFueUxpc3QoKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8Q29tcGFueVJlc3BvbnNlW10sIHN0cmluZz4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBDT01QQU5ZX0FQSS5DT01QQU5ZX0xJU1QucmVwbGFjZSgnOnVuaXF1ZU5hbWUnLCB0aGlzLnVzZXIudW5pcXVlTmFtZSkpXG4gICAgICAubWFwKChyZXMpID0+IHtcbiAgICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxDb21wYW55UmVzcG9uc2VbXSwgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8Q29tcGFueVJlc3BvbnNlW10sIHN0cmluZz4oZSwgJycpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVDb21wYW55XG4gICAqL1xuICBwdWJsaWMgRGVsZXRlQ29tcGFueSh1bmlxdWVOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxzdHJpbmcsIHN0cmluZz4+IHtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5kZWxldGUodGhpcy5jb25maWcuYXBpVXJsICsgQ09NUEFOWV9BUEkuREVMRVRFX0NPTVBBTlkucmVwbGFjZSgnOnVuaXF1ZU5hbWUnLCB1bmlxdWVOYW1lKSlcbiAgICAgIC5tYXAoKHJlcykgPT4ge1xuICAgICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPHN0cmluZywgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICAgIGRhdGEucXVlcnlTdHJpbmcgPSB7dW5pcXVlTmFtZX07XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSkuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPHN0cmluZywgc3RyaW5nPihlLCAnJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBzdGF0ZSBkZXRhaWxzXG4gICAqL1xuICBwdWJsaWMgZ2V0U3RhdGVEZXRhaWxzKGNtcFVuaXF1ZU5hbWU/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxTdGF0ZURldGFpbHNSZXNwb25zZSwgc3RyaW5nPj4ge1xuICAgIGxldCB1cmwgPSAnJztcbiAgICBpZiAoY21wVW5pcXVlTmFtZSkge1xuICAgICAgdXJsID0gdGhpcy5jb25maWcuYXBpVXJsICsgQ09NUEFOWV9BUEkuR0VUX1NUQVRFX0RFVEFJTFMucmVwbGFjZSgnOmNvbXBhbnlVbmlxdWVOYW1lJywgZW5jb2RlVVJJQ29tcG9uZW50KGNtcFVuaXF1ZU5hbWUgPyBjbXBVbmlxdWVOYW1lIDogJycpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXJsID0gdGhpcy5jb25maWcuYXBpVXJsICsgQ09NUEFOWV9BUEkuR0VUX1NUQVRFX0RFVEFJTFMucmVwbGFjZSgnP2NvbXBhbnlVbmlxdWVOYW1lPTpjb21wYW55VW5pcXVlTmFtZScsICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHVybCkubWFwKChyZXMpID0+IHtcbiAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8U3RhdGVEZXRhaWxzUmVzcG9uc2UsIHN0cmluZz4gPSByZXMuanNvbigpO1xuICAgICAgZGF0YS5xdWVyeVN0cmluZyA9IGNtcFVuaXF1ZU5hbWU7XG4gICAgICBkYXRhLnJlcXVlc3QgPSBjbXBVbmlxdWVOYW1lO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPFN0YXRlRGV0YWlsc1Jlc3BvbnNlLCBzdHJpbmc+KGUsIGNtcFVuaXF1ZU5hbWUsIGNtcFVuaXF1ZU5hbWUpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTdGF0ZURldGFpbHNBdXRoR3VhcmQoY21wVW5pcXVlTmFtZT86IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPFN0YXRlRGV0YWlsc1Jlc3BvbnNlLCBzdHJpbmc+PiB7XG4gICAgbGV0IHVybCA9ICcnO1xuICAgIGlmIChjbXBVbmlxdWVOYW1lKSB7XG4gICAgICB1cmwgPSB0aGlzLmNvbmZpZy5hcGlVcmwgKyBDT01QQU5ZX0FQSS5HRVRfU1RBVEVfREVUQUlMUy5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQoY21wVW5pcXVlTmFtZSA/IGNtcFVuaXF1ZU5hbWUgOiAnJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cmwgPSB0aGlzLmNvbmZpZy5hcGlVcmwgKyBDT01QQU5ZX0FQSS5HRVRfU1RBVEVfREVUQUlMUy5yZXBsYWNlKCc/Y29tcGFueVVuaXF1ZU5hbWU9OmNvbXBhbnlVbmlxdWVOYW1lJywgJycpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5faHR0cC5nZXQodXJsKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxTdGF0ZURldGFpbHNSZXNwb25zZSwgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEVmZmVjdHMgbmVlZCB0byBiZSByZXZpZXdcbiAgcHVibGljIHNldFN0YXRlRGV0YWlscyhzdGF0ZURldGFpbHM6IFN0YXRlRGV0YWlsc1JlcXVlc3QpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxzdHJpbmcsIFN0YXRlRGV0YWlsc1JlcXVlc3Q+PiB7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAucG9zdCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBDT01QQU5ZX0FQSS5TRVRfU1RBVEVfREVUQUlMUywgc3RhdGVEZXRhaWxzKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxzdHJpbmcsIFN0YXRlRGV0YWlsc1JlcXVlc3Q+ID0gcmVzLmpzb24oKTtcbiAgICAgIGRhdGEucmVxdWVzdCA9IHN0YXRlRGV0YWlscztcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxzdHJpbmcsIFN0YXRlRGV0YWlsc1JlcXVlc3Q+KGUsIHN0YXRlRGV0YWlscykpO1xuICB9XG5cbiAgcHVibGljIGdldENvbWFwbnlUYXhlcygpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxUYXhSZXNwb25zZVtdLCBzdHJpbmc+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHRoaXMuY29uZmlnLmFwaVVybCArIENPTVBBTllfQVBJLlRBWC5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxUYXhSZXNwb25zZVtdLCBzdHJpbmc+ID0gcmVzLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxUYXhSZXNwb25zZVtdLCBzdHJpbmc+KGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb21hcG55VXNlcnMoKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8QWNjb3VudFNoYXJlZFdpdGhSZXNwb25zZVtdLCBzdHJpbmc+PiB7XG4gICAgdGhpcy51c2VyID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UudXNlcjtcbiAgICB0aGlzLmNvbXBhbnlVbmlxdWVOYW1lID0gdGhpcy5fZ2VuZXJhbFNlcnZpY2UuY29tcGFueVVuaXF1ZU5hbWU7XG4gICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHRoaXMuY29uZmlnLmFwaVVybCArIENPTVBBTllfQVBJLkdFVF9DT01QQU5ZX1VTRVJTLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSkpLm1hcCgocmVzKSA9PiB7XG4gICAgICBsZXQgZGF0YTogQmFzZVJlc3BvbnNlPEFjY291bnRTaGFyZWRXaXRoUmVzcG9uc2VbXSwgc3RyaW5nPiA9IHJlcy5qc29uKCk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgoZSkgPT4gdGhpcy5lcnJvckhhbmRsZXIuSGFuZGxlQ2F0Y2g8QWNjb3VudFNoYXJlZFdpdGhSZXNwb25zZVtdLCBzdHJpbmc+KGUpKTtcbiAgfVxuXG4gIHB1YmxpYyBzZW5kRW1haWwocmVxdWVzdDogQnVsa0VtYWlsUmVxdWVzdCk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPHN0cmluZywgQnVsa0VtYWlsUmVxdWVzdD4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuY29uZmlnLmFwaVVybCArIENPTVBBTllfQVBJLlNFTkRfRU1BSUxcbiAgICAgICAgLnJlcGxhY2UoJzpjb21wYW55VW5pcXVlTmFtZScsIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmNvbXBhbnlVbmlxdWVOYW1lKSlcbiAgICAgICAgLnJlcGxhY2UoJzpmcm9tJywgZW5jb2RlVVJJQ29tcG9uZW50KHJlcXVlc3QucGFyYW1zLmZyb20pKVxuICAgICAgICAucmVwbGFjZSgnOnRvJywgZW5jb2RlVVJJQ29tcG9uZW50KHJlcXVlc3QucGFyYW1zLnRvKSlcbiAgICAgICwgcmVxdWVzdC5kYXRhKS5tYXAoKHJlcykgPT4ge1xuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPHN0cmluZywgQnVsa0VtYWlsUmVxdWVzdD4oZSkpO1xuICB9XG5cbiAgcHVibGljIHNlbmRTbXMocmVxdWVzdDogQnVsa0VtYWlsUmVxdWVzdCk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPHN0cmluZywgQnVsa0VtYWlsUmVxdWVzdD4+IHtcbiAgICB0aGlzLnVzZXIgPSB0aGlzLl9nZW5lcmFsU2VydmljZS51c2VyO1xuICAgIHRoaXMuY29tcGFueVVuaXF1ZU5hbWUgPSB0aGlzLl9nZW5lcmFsU2VydmljZS5jb21wYW55VW5pcXVlTmFtZTtcbiAgICByZXR1cm4gdGhpcy5faHR0cC5wb3N0KHRoaXMuY29uZmlnLmFwaVVybCArIENPTVBBTllfQVBJLlNFTkRfU01TXG4gICAgICAgIC5yZXBsYWNlKCc6Y29tcGFueVVuaXF1ZU5hbWUnLCBlbmNvZGVVUklDb21wb25lbnQodGhpcy5jb21wYW55VW5pcXVlTmFtZSkpXG4gICAgICAgIC5yZXBsYWNlKCc6ZnJvbScsIGVuY29kZVVSSUNvbXBvbmVudChyZXF1ZXN0LnBhcmFtcy5mcm9tKSlcbiAgICAgICAgLnJlcGxhY2UoJzp0bycsIGVuY29kZVVSSUNvbXBvbmVudChyZXF1ZXN0LnBhcmFtcy50bykpXG4gICAgICAsIHJlcXVlc3QuZGF0YSkubWFwKChyZXMpID0+IHtcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxzdHJpbmcsIEJ1bGtFbWFpbFJlcXVlc3Q+KGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgYWxsIHN0YXRlc1xuICAgKi9cbiAgcHVibGljIGdldEFsbFN0YXRlcygpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZTxTdGF0ZXNbXSwgc3RyaW5nPj4ge1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBDT01QQU5ZX0FQSS5HRVRfQUxMX1NUQVRFUykubWFwKChyZXMpID0+IHtcbiAgICAgIGxldCBkYXRhOiBCYXNlUmVzcG9uc2U8U3RhdGVzW10sIHN0cmluZz4gPSByZXMuanNvbigpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkuY2F0Y2goKGUpID0+IHRoaXMuZXJyb3JIYW5kbGVyLkhhbmRsZUNhdGNoPFN0YXRlc1tdLCBzdHJpbmc+KGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgY291cG9uIGRldGFpbHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvdXBvbkNvZGVcbiAgICogQHJldHVybnMge09ic2VydmFibGU8QmFzZVJlc3BvbnNlPEdldENvdXBvblJlc3AsIHN0cmluZz4+fVxuICAgKiBAbWVtYmVyb2YgQ29tcGFueVNlcnZpY2VcbiAgICovXG4gIHB1YmxpYyBnZXRDb3Vwb24oY291cG9uQ29kZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlUmVzcG9uc2U8R2V0Q291cG9uUmVzcCwgc3RyaW5nPj4ge1xuICAgIHJldHVybiB0aGlzLl9odHRwLmdldCh0aGlzLmNvbmZpZy5hcGlVcmwgKyBDT01QQU5ZX0FQSS5HRVRfQ09VUE9OXG4gICAgICAucmVwbGFjZSgnOmNvZGUnLCBlbmNvZGVVUklDb21wb25lbnQoY291cG9uQ29kZSkpKS5tYXAoKHJlcykgPT4ge1xuICAgICAgbGV0IGRhdGE6IEJhc2VSZXNwb25zZTxHZXRDb3Vwb25SZXNwLCBzdHJpbmc+ID0gcmVzLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKChlKSA9PiB0aGlzLmVycm9ySGFuZGxlci5IYW5kbGVDYXRjaDxHZXRDb3Vwb25SZXNwLCBzdHJpbmc+KGUpKTtcbiAgfVxufVxuIl19