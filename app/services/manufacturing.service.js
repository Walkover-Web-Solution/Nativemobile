"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpWrapper_service_1 = require("./httpWrapper.service");
var core_1 = require("@angular/core");
var catchmanger_1 = require("./catchManager/catchmanger");
var manufacturing_api_1 = require("./apiurls/manufacturing.api");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var ManufacturingService = (function () {
    function ManufacturingService(errorHandler, _http, _generalService, config) {
        this.errorHandler = errorHandler;
        this._http = _http;
        this._generalService = _generalService;
        this.config = config;
    }
    /**
     * get manufacturing item details
     * URL:: company/:companyUniqueName/stock/:stockUniqueName/manufacture/:manufacturingUniqueName
     */
    ManufacturingService.prototype.GetManufacturingItem = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + manufacturing_api_1.MANUFACTURING_API.GET.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':stockUniqueName', encodeURIComponent(model.stockUniqueName)).replace(':manufacturingUniqueName', model.manufacturingUniqueName))
            .map(function (res) {
            var data = res.json();
            data.queryString = model;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    /**
     * create manufacturing item
     * URL:: company/:companyUniqueName/stock/:stockUniqueName/manufacture
     * get resuest model and stock uniquename
     */
    ManufacturingService.prototype.CreateManufacturingItem = function (model, stockUniqueName) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.post(this.config.apiUrl + manufacturing_api_1.MANUFACTURING_API.CREATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':stockUniqueName', encodeURIComponent(stockUniqueName)), model).map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = { stockUniqueName: stockUniqueName };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, model); });
    };
    /**
     * Update manufacturing item
     * URL:: company/:companyUniqueName/stock/:stockUniqueName/manufacture/:manufacturingUniqueName
     */
    ManufacturingService.prototype.UpdateManufacturingItem = function (model, reqModal) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.put(this.config.apiUrl + manufacturing_api_1.MANUFACTURING_API.UPDATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':stockUniqueName', reqModal.stockUniqueName).replace(':manufacturingUniqueName', reqModal.manufacturingUniqueName), model).map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = reqModal;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, model); });
    };
    /**
     * Delete manufacturing item
     * URL:: company/:companyUniqueName/stock/:stockUniqueName/manufacture/:manufacturingUniqueName
     */
    ManufacturingService.prototype.DeleteManufacturingItem = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.delete(this.config.apiUrl + manufacturing_api_1.MANUFACTURING_API.DELETE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':stockUniqueName', encodeURIComponent(model.stockUniqueName)).replace(':manufacturingUniqueName', model.manufacturingUniqueName)).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = { model: model };
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, '', { model: model }); });
    };
    /**
     * get manufacturing report details
     * URL:: company/:companyUniqueName/stock/manufacture-report
     */
    ManufacturingService.prototype.GetMfReport = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        // create url conditionally
        var url = this.config.apiUrl + manufacturing_api_1.MANUFACTURING_API.MF_REPORT;
        if ((model.product)) {
            url = url + 'product=' + model.product + '&';
        }
        if ((model.searchBy)) {
            url = url + 'searchBy=' + model.searchBy + '&';
        }
        if ((model.searchOperation)) {
            url = url + 'searchOperation=' + model.searchOperation + '&';
        }
        if ((model.searchValue)) {
            url = url + 'searchValue=' + model.searchValue + '&';
        }
        if ((model.from)) {
            url = url + 'from=' + model.from + '&';
        }
        if ((model.to)) {
            url = url + 'to=' + model.to + '&';
        }
        if ((model.page)) {
            url = url + 'page=' + model.page + '&';
        }
        if ((model.count)) {
            url = url + 'count=' + model.count;
        }
        return this._http.get(url.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)))
            .map(function (res) {
            var data = res.json();
            data.request = model;
            data.queryString = model;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, model); });
    };
    /**
     * get stock with rate
     * URL:: /company/:companyUniqueName/stock/:stockUniqueName/link-with-rates
     */
    ManufacturingService.prototype.GetStockWithRate = function (model) {
        var _this = this;
        this.user = this._generalService.user;
        this.companyUniqueName = this._generalService.companyUniqueName;
        return this._http.get(this.config.apiUrl + manufacturing_api_1.MANUFACTURING_API.GET_STOCK_WITH_RATE.replace(':companyUniqueName', encodeURIComponent(this.companyUniqueName)).replace(':stockUniqueName', encodeURIComponent(model.stockUniqueName)))
            .map(function (res) {
            var data = res.json();
            data.queryString = model;
            return data;
        })
            .catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    return ManufacturingService;
}());
ManufacturingService = __decorate([
    core_1.Injectable(),
    __param(3, core_1.Optional()), __param(3, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler, httpWrapper_service_1.HttpWrapperService, general_service_1.GeneralService, Object])
], ManufacturingService);
exports.ManufacturingService = ManufacturingService;
//# sourceMappingURL=data:application/json;base64,