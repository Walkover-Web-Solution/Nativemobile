"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
require("rxjs/add/operator/map");
var router_1 = require("@angular/router");
var httpWrapper_service_1 = require("./httpWrapper.service");
var login_api_1 = require("./apiurls/login.api");
var catchmanger_1 = require("./catchManager/catchmanger");
var http_1 = require("@angular/http");
var general_service_1 = require("./general.service");
var service_config_1 = require("./service.config");
var AuthenticationService = (function () {
    function AuthenticationService(errorHandler, _Http, _http, _router, _generalService, config) {
        this.errorHandler = errorHandler;
        this._Http = _Http;
        this._http = _http;
        this._router = _router;
        this._generalService = _generalService;
        this.config = config;
    }
    AuthenticationService.prototype.SignupWithEmail = function (email) {
        var _this = this;
        return this._http.post(this.config.apiUrl + login_api_1.LOGIN_API.SignupWithEmail, { email: email }).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, email); });
    };
    AuthenticationService.prototype.VerifyEmail = function (model) {
        var _this = this;
        return this._http.post(this.config.apiUrl + login_api_1.LOGIN_API.VerifyEmail, model).map(function (res) {
            var data = res.json();
            data.request = model;
            // console.log(data);
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, model); });
    };
    AuthenticationService.prototype.SignupWithMobile = function (model) {
        var _this = this;
        return this._http.post(this.config.apiUrl + login_api_1.LOGIN_API.SignupWithMobile, model).map(function (res) {
            var data = res.json();
            data.request = model;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, model); });
    };
    AuthenticationService.prototype.VerifyOTP = function (modele) {
        var _this = this;
        return this._http.post(this.config.apiUrl + login_api_1.LOGIN_API.VerifyOTP, modele).map(function (res) {
            var data = res.json();
            data.request = modele;
            // console.log(data);
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, modele); });
    };
    AuthenticationService.prototype.VerifyNumber = function (modele) {
        var _this = this;
        return this._http.post(this.config.apiUrl + login_api_1.LOGIN_API.VerifyNumber, modele).map(function (res) {
            var data = res.json();
            data.request = modele;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, modele); });
    };
    AuthenticationService.prototype.VerifyNumberOTP = function (modele) {
        var _this = this;
        return this._http.put(this.config.apiUrl + login_api_1.LOGIN_API.VerifyNumber, modele).map(function (res) {
            var data = res.json();
            data.request = modele;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AuthenticationService.prototype.ClearSession = function () {
        var _this = this;
        var userName = this._generalService.user.uniqueName;
        return this._http.delete(this.config.apiUrl + login_api_1.LOGIN_API.CLEAR_SESSION.replace(':userUniqueName', encodeURIComponent(userName))).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e); });
    };
    AuthenticationService.prototype.LoginWithGoogle = function (token) {
        var _this = this;
        var args = {};
        args.headers = new http_1.Headers();
        args.headers.append('cache-control', 'no-cache');
        args.headers.append('Content-Type', 'application/json');
        args.headers.append('Accept', 'application/json');
        args.headers.append('Access-Token', token);
        return this._Http.get(this.config.apiUrl + login_api_1.LOGIN_API.LOGIN_WITH_GOOGLE, args).map(function (res) {
            var data = res.json();
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, args); });
    };
    AuthenticationService.prototype.LoginWithLinkedin = function (model) {
        var _this = this;
        var args = {};
        args.headers = new http_1.Headers();
        args.headers.append('cache-control', 'no-cache');
        args.headers.append('Content-Type', 'application/json');
        args.headers.append('Accept', 'application/json');
        args.headers.append('Access-Token', model.token);
        args.headers.append('User-Email', model.email);
        return this._Http.get(this.config.apiUrl + login_api_1.LOGIN_API.LOGIN_WITH_LINKEDIN, args).map(function (res) {
            var data = res.json();
            data.request = model;
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, args); });
    };
    AuthenticationService.prototype.SetSettings = function (model) {
        var _this = this;
        var uniqueName = this._generalService.user.uniqueName;
        return this._http.put(this.config.apiUrl + login_api_1.LOGIN_API.SET_SETTINGS
            .replace(':userUniqueName', encodeURIComponent(uniqueName)), model).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = {};
            // data.response.results.forEach(p => p.isOpen = false);
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    AuthenticationService.prototype.FetchUserDetails = function () {
        var _this = this;
        var sessionId = this._generalService.user.uniqueName;
        return this._http.get(this.config.apiUrl + login_api_1.LOGIN_API.FETCH_DETAILS
            .replace(':sessionId', sessionId)).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = {};
            // data.response.results.forEach(p => p.isOpen = false);
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    AuthenticationService.prototype.GetSubScribedCompanies = function () {
        var _this = this;
        var userUniqueName = this._generalService.user.uniqueName;
        return this._http.get(this.config.apiUrl + login_api_1.LOGIN_API.SUBSCRIBED_COMPANIES
            .replace(':userUniqueName', userUniqueName)).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = {};
            // data.response.results.forEach(p => p.isOpen = false);
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    AuthenticationService.prototype.AddBalance = function (model) {
        var _this = this;
        var uniqueName = this._generalService.user.uniqueName;
        return this._http.get(this.config.apiUrl + login_api_1.LOGIN_API.ADD_BALANCE
            .replace(':uniqueName', uniqueName)).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = {};
            // data.response.results.forEach(p => p.isOpen = false);
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    AuthenticationService.prototype.GetAuthKey = function () {
        var _this = this;
        var uniqueName = this._generalService.user.uniqueName;
        return this._http.get(this.config.apiUrl + login_api_1.LOGIN_API.GET_AUTH_KEY
            .replace(':uniqueName', uniqueName)).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = {};
            // data.response.results.forEach(p => p.isOpen = false);
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    AuthenticationService.prototype.RegenerateAuthKey = function () {
        var _this = this;
        var userEmail = this._generalService.user.email;
        return this._http.put(this.config.apiUrl + login_api_1.LOGIN_API.REGENERATE_AUTH_KEY
            .replace(':userEmail', userEmail), {}).map(function (res) {
            var data = res.json();
            data.request = '';
            data.queryString = {};
            // data.response.results.forEach(p => p.isOpen = false);
            return data;
        }).catch(function (e) { return _this.errorHandler.HandleCatch(e, ''); });
    };
    return AuthenticationService;
}());
AuthenticationService = __decorate([
    core_1.Injectable(),
    __param(5, core_1.Optional()), __param(5, core_1.Inject(service_config_1.ServiceConfig)),
    __metadata("design:paramtypes", [catchmanger_1.ErrorHandler,
        http_1.Http,
        httpWrapper_service_1.HttpWrapperService,
        router_1.Router,
        general_service_1.GeneralService, Object])
], AuthenticationService);
exports.AuthenticationService = AuthenticationService;
//# sourceMappingURL=data:application/json;base64,